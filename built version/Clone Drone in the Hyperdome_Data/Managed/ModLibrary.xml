<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModLibrary</name>
    </assembly>
    <members>
        <member name="T:ModLibrary.Accessor">
            <summary>
            Helper class to access non-public members of types
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.FLAGS">
            <summary>
            The default <see cref="T:System.Reflection.BindingFlags"/> used to access members
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.FLAGS_GETMEMBERINFO">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used by the GetMemberInfo methods
            </summary>
        </member>
        <member name="M:ModLibrary.Accessor.GetMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.MethodInfo"/> which matches the arguments
            </summary>
            <param name="declaringType">The <see cref="T:System.Type"/> that declares the target method</param>
            <param name="methodName">The name of the target method (case-sensitive)</param>
            <param name="argumentTypes">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (Match any nullable type), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetMethodInfo(System.Type,System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.MethodInfo"/> which matches the arguments
            </summary>
            <param name="declaringType">The <see cref="T:System.Type"/> that declares the target method</param>
            <param name="methodName">The name of the target method (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetMethodInfo``1(System.String,System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.MethodInfo"/> which matches the arguments
            </summary>
            <typeparam name="InstanceType">The type that declares the target method</typeparam>
            <param name="methodName">The name of the target method (case-sensitive)</param>
            <param name="argumentTypes">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (Match any nullable type), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetMethodInfo``1(System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.MethodInfo"/> which matches the arguments
            </summary>
            <typeparam name="InstanceType">The type that declares the target method</typeparam>
            <param name="methodName">The name of the target method (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``2(System.String,``0,System.Object[])">
            <summary>
            Invokes a non-public instance method and returns its result
            </summary>
            <typeparam name="InstanceType">The type of the object used to invoke the method</typeparam>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="instance">The instance to invoke the method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``2(System.String,``0,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public instance method and returns its result
            </summary>
            <typeparam name="InstanceType">The type of the object used to invoke the method</typeparam>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="instance">The instance to invoke the method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a non-public instance method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="instance">The instance to invoke the method</param>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public instance method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="instance">The instance to invoke the method</param>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Invokes a non-public method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="instance">The object used to invoke the method, type must be equivalent to the <paramref name="declaringType"/> parameter, to invoke a static method this parameter must be <see langword="null"/></param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Type,System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="instance">The object used to invoke the method, type must be equivalent to the <paramref name="declaringType"/> parameter, to invoke a static method this parameter must be <see langword="null"/></param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a non-public static method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.Type,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public static method and returns its result
            </summary>
            <typeparam name="ReturnType">The target method's return value, only used to convert the return value from object to a target type</typeparam>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <returns>The return value of the target method</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,``0,System.Object[])">
            <summary>
            Invokes a non-public instance method and ignores its result
            </summary>
            <typeparam name="InstanceType">The type of the object used to invoke the method</typeparam>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="instance">The instance to invoke the method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,``0,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public instance method and ignores its result
            </summary>
            <typeparam name="InstanceType">The type of the object used to invoke the method</typeparam>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="instance">The instance to invoke the method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a non-public instance method and ignores its result
            </summary>
            <param name="instance">The instance to invoke the method</param>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public instance method and ignores its result
            </summary>
            <param name="instance">The instance to invoke the method</param>
            <param name="methodName">The case-sensitive name of the target method</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Invokes a non-public method and ignores its result
            </summary>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="instance">The object used to invoke the method, type must be equivalent to the <paramref name="declaringType"/> parameter, to invoke a static method this parameter must be <see langword="null"/></param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public method and ignores its result
            </summary>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="instance">The object used to invoke the method, type must be equivalent to the <paramref name="declaringType"/> parameter, to invoke a static method this parameter must be <see langword="null"/></param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a non-public static method and ignores its result
            </summary>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.String,System.Object[],System.Type[])">
            <summary>
            Invokes a non-public static method and ignores its result
            </summary>
            <param name="declaringType">The declaring type of the target method</param>
            <param name="methodName">The name of the non-public method to invoke</param>
            <param name="args">The arguments to pass to the method, leave as <see langword="null"/> for no arguments</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="args"/> array</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingMethodException">The target method could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the method</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetFieldInfo(System.Type,System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.FieldInfo"/> which matches the arguments
            </summary>
            <param name="declaringType">The <see cref="T:System.Type"/> that declares the target field</param>
            <param name="fieldName">The name of the target field (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.FieldInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetFieldInfo``1(System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.FieldInfo"/> which matches the arguments
            </summary>
            <typeparam name="InstanceType">The type that declares the target field</typeparam>
            <param name="fieldName">The name of the target field (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.FieldInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the value of a non-public field
            </summary>
            <param name="declaringType">The type that declares the field</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="instance">The instance to assign the field on, if the target field is static, this parameter should be <see langword="null"/></param>
            <param name="value">The new value of the field</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of a non-public static field
            </summary>
            <param name="declaringType">The type that declares the field</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="value">The new value of the field</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``2(System.String,``0,``1)">
            <summary>
            Sets the value of a non-public field
            </summary>
            <typeparam name="InstanceType">The type that declares the field</typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="instance">The instance to assign the field on</param>
            <param name="value">The new value of the field</param>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a non-public instance field
            </summary>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="instance">The instance to assign the field on</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="value">The new value of the field</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``2(System.String,``0)">
            <summary>
            Gets the value of a non-public field
            </summary>
            <typeparam name="InstanceType">The type that declares the field</typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="instance">The instance to read the field value from</param>
            <returns>The current value of the field</returns>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``1(System.Object,System.String)">
            <summary>
            Gets the value of a non-public instance field
            </summary>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="instance">The instance to read the field value from</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <returns>The current value of the field</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``1(System.Type,System.String,System.Object)">
            <summary>
            Gets the value of a non-public field
            </summary>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="declaringType">The type that declares the field</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <param name="instance">The instance to assign the field on, if the target field is static, this parameter should be <see langword="null"/></param>
            <returns>The current value of the field</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``1(System.Type,System.String)">
            <summary>
            Gets the value of a non-public static field
            </summary>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="declaringType">The type that declares the field</param>
            <param name="fieldName">The case-sensitive name of the field</param>
            <returns>The current value of the field</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is <see langword="null"/>, empty, or consists only of whitespace characters</exception>
            <exception cref="T:System.MissingFieldException">The target field could not be found</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPropertyInfo(System.Type,System.String,System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.PropertyInfo"/> which matches the arguments
            </summary>
            <param name="declaringType">The <see cref="T:System.Type"/> that declares the target property</param>
            <param name="propertyName">The name of the target property (case-sensitive)</param>
            <param name="argumentTypes">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (Match any nullable type), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).</param>
            <returns>The found <see cref="T:System.Reflection.PropertyInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.MethodInfo"/> which matches the arguments
            </summary>
            <param name="declaringType">The <see cref="T:System.Type"/> that declares the target property</param>
            <param name="propertyName">The name of the target property (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPropertyInfo``1(System.String,System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.PropertyInfo"/> which matches the arguments
            </summary>
            <typeparam name="InstanceType">The type that declares the target property</typeparam>
            <param name="propertyName">The name of the target property (case-sensitive)</param>
            <param name="argumentTypes">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (Match any nullable type), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).</param>
            <returns>The found <see cref="T:System.Reflection.PropertyInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPropertyInfo``1(System.String)">
            <summary>
            Finds a <see cref="T:System.Reflection.PropertyInfo"/> which matches the arguments
            </summary>
            <typeparam name="InstanceType">The type that declares the target property</typeparam>
            <param name="propertyName">The name of the target property (case-sensitive)</param>
            <returns>The found <see cref="T:System.Reflection.PropertyInfo"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object,System.Object,System.Object[],System.Type[])">
            <summary>
            Sets the value of a non-public property
            </summary>
            <param name="declaringType">The type that declares the property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the value of a non-public property
            </summary>
            <param name="declaringType">The type that declares the property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of a non-public static property
            </summary>
            <param name="declaringType">The type that declares the property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object,System.Object,System.Object[])">
            <summary>
            Sets the value of a non-public property
            </summary>
            <param name="declaringType">The type that declares the property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``2(System.String,``0,``1)">
            <summary>
            Sets the value of a non-public property
            </summary>
            <typeparam name="InstanceType">The type that declares the property</typeparam>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``2(System.String,``0,``1,System.Object[])">
            <summary>
            Sets the value of a non-public property
            </summary>
            <typeparam name="InstanceType">The type that declares the property</typeparam>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``2(System.String,``0,``1,System.Object[],System.Type[])">
            <summary>
            Sets the value of a non-public property
            </summary>
            <typeparam name="InstanceType">The type that declares the property</typeparam>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a non-public instance property
            </summary>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="instance">The instance to set the property on</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> in <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``1(System.Object,System.String,``0,System.Object[])">
            <summary>
            Sets the value of a non-public instance property
            </summary>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="instance">The instance to set the property on</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> in <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``1(System.Object,System.String,``0,System.Object[],System.Type[])">
            <summary>
            Sets the value of a non-public instance property
            </summary>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="instance">The instance to set the property on</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="value">The value to set the property to</param>
            <param name="indices">The indices to use when invoking the property set method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> in <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty(System.Type,System.String,System.Object,System.Type,System.Object[],System.Type[])">
            <summary>
            Gets the value of a non-public property
            </summary>
            <param name="declaringType">The type the declares the target property</param>
            <param name="instance">The instance to get the property from, if the target property is <see langword="static"/>, this parameter shoud be <see langword="null"/></param>
            <param name="returnType">The return type of the target property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``2(System.String,``0,System.Object[])">
            <summary>
            Gets the value of a non-public property
            </summary>
            <typeparam name="InstanceType">The type that declares the property</typeparam>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to get the property from, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``2(System.String,``0,System.Object[],System.Type[])">
            <summary>
            Gets the value of a non-public property
            </summary>
            <typeparam name="InstanceType">The type that declares the property</typeparam>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="instance">The instance to get the property from, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Object,System.String,System.Object[])">
            <summary>
            Gets the value of a non-public instance property
            </summary>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="instance">The instance to get the property from</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Gets the value of a non-public instance property
            </summary>
            <typeparam name="PropertyType">The return type of the property</typeparam>
            <param name="instance">The instance to get the property from</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Gets the value of a non-public property
            </summary>
            <typeparam name="PropertyType">The type returned by the property</typeparam>
            <param name="declaringType">The type that declares the target property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Type,System.Object,System.String,System.Object[],System.Type[])">
            <summary>
            Gets the value of a non-public property
            </summary>
            <typeparam name="PropertyType">The type returned by the property</typeparam>
            <param name="declaringType">The type that declares the target property</param>
            <param name="instance">The instance to set the property on, if the target property is static, this parameter should be <see langword="null"/></param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type implicitly assignable to <paramref name="declaringType"/></exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Type,System.String,System.Object[])">
            <summary>
            Gets the value of a non-public static property
            </summary>
            <typeparam name="PropertyType">The type returned by the property</typeparam>
            <param name="declaringType">The type that declares the target property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.Type,System.String,System.Object[],System.Type[])">
            <summary>
            Gets the value of a non-public static property
            </summary>
            <typeparam name="PropertyType">The type returned by the property</typeparam>
            <param name="declaringType">The type that declares the target property</param>
            <param name="propertyName">The case-sensitive name of the property</param>
            <param name="indices">The indices to use when invoking the property get method, if the target property has no indexer parameters, this parameter should be <see langword="null"/></param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="indices"/> array</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is <see langword="null"/>, empty, or consist only of whitespace characters</exception>
            <exception cref="T:System.MissingMemberException">The target property could not be found</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">An ambiguous match was found while searching for the property</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetStaticConstructorInfo(System.Type)">
            <summary>
            Gets the static constructor declared in the given type.
            </summary>
            <param name="declaringType">The type that declares the target static constructor</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> representing the <paramref name="declaringType"/>'s static constructor</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetStaticConstructorInfo``1">
            <summary>
            Gets the static constructor declared in the given type.
            </summary>
            <typeparam name="T">The type that declares the target static constructor</typeparam>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> representing the <typeparamref name="T"/>'s static constructor</returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetConstructorInfo(System.Type)">
            <summary>
            Returns the single <see cref="T:System.Reflection.ConstructorInfo"/> defined in <paramref name="declaringType"/>
            </summary>
            <param name="declaringType">The type that defines the target constructor</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><paramref name="declaringType"/> defines more than one constructor</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetConstructorInfo``1">
            <summary>
            Returns the single <see cref="T:System.Reflection.ConstructorInfo"/> defined in <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type that defines the target constructor</typeparam>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><typeparamref name="T"/> defines more than one constructor</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetConstructorInfo(System.Type,System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.ConstructorInfo"/> defined in <paramref name="declaringType"/> with matching argument types <paramref name="argumentTypes"/>
            </summary>
            <param name="declaringType">The type that defines the target constructor</param>
            <param name="argumentTypes">The types of all the parameters in the target constructor</param>
            <returns>The found <see cref="T:System.Reflection.ConstructorInfo"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetConstructorInfo``1(System.Type[])">
            <summary>
            Finds a <see cref="T:System.Reflection.ConstructorInfo"/> defined in <typeparamref name="T"/> with matching argument types <paramref name="argumentTypes"/>
            </summary>
            <typeparam name="T">The type that defines the target constructor</typeparam>
            <param name="argumentTypes">The types of all the parameters in the target constructor</param>
            <returns>The found <see cref="T:System.Reflection.ConstructorInfo"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor(System.Type)">
            <summary>
            Invokes the non-public constructor defined in <paramref name="declaringType"/> that takes either no parameters or all parameters are optional
            </summary>
            <param name="declaringType">The type that defines the target constructor</param>
            <returns>The created instance of <paramref name="declaringType"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><paramref name="declaringType"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><paramref name="declaringType"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor``1">
            <summary>
            Invokes the non-public constructor defined in <typeparamref name="T"/> that takes either no parameters or all parameters are optional
            </summary>
            <typeparam name="T">The type that defines the target constructor</typeparam>
            <returns>The created instance of <typeparamref name="T"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><typeparamref name="T"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><typeparamref name="T"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor(System.Type,System.Object[])">
            <summary>
            Invokes the non-public constructor defined in <paramref name="declaringType"/> that takes parameters matching the types and order of <paramref name="arguments"/>
            </summary>
            <param name="declaringType">The type that defines the target constructor</param>
            <param name="arguments">The arguments to pass to the constructor</param>
            <returns>The created instance of <paramref name="declaringType"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><paramref name="declaringType"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><paramref name="declaringType"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor``1(System.Object[])">
            <summary>
            Invokes the non-public constructor defined in <typeparamref name="T"/> that takes parameters matching the types and order of <paramref name="arguments"/>
            </summary>
            <typeparam name="T">The type that defines the target constructor</typeparam>
            <param name="arguments">The arguments to pass to the constructor</param>
            <returns>The created instance of <typeparamref name="T"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><typeparamref name="T"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><typeparamref name="T"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor(System.Type,System.Object[],System.Type[])">
            <summary>
            Invokes the non-public constructor defined in <paramref name="declaringType"/> that takes parameters matching the types and order of <paramref name="arguments"/> with optional type overrides defined with <paramref name="parameterTypeOverrides"/>
            </summary>
            <param name="declaringType">The type that defines the target constructor</param>
            <param name="arguments">The arguments to pass to the constructor</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="arguments"/> array</param>
            <returns>The created instance of <paramref name="declaringType"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="declaringType"/> is <see langword="null"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><paramref name="declaringType"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><paramref name="declaringType"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.InvokePrivateConstructor``1(System.Object[],System.Type[])">
            <summary>
            Invokes the non-public constructor defined in <typeparamref name="T"/> that takes parameters matching the types and order of <paramref name="arguments"/> with optional type overrides defined with <paramref name="parameterTypeOverrides"/>
            </summary>
            <typeparam name="T">The type that defines the target constructor</typeparam>
            <param name="arguments">The arguments to pass to the constructor</param>
            <param name="parameterTypeOverrides">If not <see langword="null"/>, explicitly defines the type of specific arguments, individual items can be <see langword="null"/> (determine from context), or any <see cref="T:System.Type"/> (the argument at the same position as in this array will require a parameter that exactly matches that type).
            <br/>
            If <see langword="null"/>, all parameter types are decided by the items in the <paramref name="arguments"/> array</param>
            <returns>The created instance of <typeparamref name="T"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"><typeparamref name="T"/> defines more than one constructor that matches the parameters</exception>
            <exception cref="T:System.MissingMethodException"><typeparamref name="T"/> does not define a constructor that matches the parameters</exception>
        </member>
        <member name="M:ModLibrary.Accessor.GetDeclaredNestedType(System.Type,System.String)">
            <summary>
            Finds a nested type defined in <paramref name="declaringType"/> with name <paramref name="nestedTypeName"/>
            </summary>
            <param name="declaringType">The type that defines the target nested type</param>
            <param name="nestedTypeName">The name of the nested type</param>
            <returns>The nested type</returns>
        </member>
        <member name="T:ModLibrary.AssetBundleInfo">
            <summary>
            Contains information about an asset bundle with all the assets asynchronously cached
            </summary>
        </member>
        <member name="M:ModLibrary.AssetBundleInfo.Finalize">
            <summary>
            Unloads the AssetBundle when this object is destroyed
            </summary>
        </member>
        <member name="M:ModLibrary.AssetBundleInfo.GetObject``1(System.String)">
            <summary>
            Loads an object from the <see cref="T:UnityEngine.AssetBundle"/>. Note: This will most likely be a prefab, if you want to instantiate the object you might want to use <see cref="M:ModLibrary.AssetBundleInfo.InstantiateObject``1(System.String)"/> instead
            </summary>
            <typeparam name="T">The type of object to load</typeparam>
            <param name="objectName">The name of the object to load</param>
            <returns>The object loaded from the asset bundle</returns>
        </member>
        <member name="M:ModLibrary.AssetBundleInfo.GetObject(System.String)">
            <summary>
            Loads a <see cref="T:UnityEngine.GameObject"/> from the <see cref="T:UnityEngine.AssetBundle"/>. Note: This will most likely be a prefab, if you want to instantiate the <see cref="T:UnityEngine.GameObject"/> you might want to use <see cref="M:ModLibrary.AssetBundleInfo.InstantiateObject(System.String)"/> instead
            </summary>
            <param name="objectName">The name of the <see cref="T:UnityEngine.GameObject"/> to load</param>
            <returns>The <see cref="T:UnityEngine.GameObject"/> loaded from the <see cref="T:UnityEngine.AssetBundle"/></returns>
        </member>
        <member name="M:ModLibrary.AssetBundleInfo.InstantiateObject``1(System.String)">
            <summary>
            Instantiates an object of type <typeparamref name="T"/> from the <see cref="T:UnityEngine.AssetBundle"/>
            </summary>
            <typeparam name="T">The type of the object to instantiate</typeparam>
            <param name="objectName">The name of the object to instantiate</param>
            <returns>The instantiated object</returns>
        </member>
        <member name="M:ModLibrary.AssetBundleInfo.InstantiateObject(System.String)">
            <summary>
            Instantiates a <see cref="T:UnityEngine.GameObject"/> from the <see cref="T:UnityEngine.AssetBundle"/>
            </summary>
            <param name="objectName">The name of the <see cref="T:UnityEngine.GameObject"/> to instantiate</param>
            <returns>The instantiated <see cref="T:UnityEngine.GameObject"/></returns>
        </member>
        <member name="T:ModLibrary.AssetLoader">
            <summary>
            Used to load assets from assetbundles (normally placed in the mods folder)
            </summary>
        </member>
        <member name="F:ModLibrary.AssetLoader.MODS_FOLDER_NAME">
            <summary>
            The name of the folder where mods are stored
            </summary>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetModsFolderDirectory">
            <summary>
            Returns the full directory to the mods folder directory where we expect most of the assetbundles to be
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetAssetBundle(System.String,System.String)">
            <summary>
            Gets the <see cref="T:ModLibrary.AssetBundleInfo"/> from the asset bundle with the specfied name at the given custom path
            </summary>
            <param name="name">The name of the asset bundle file</param>
            <param name="customPath">The custom path to the asset bundle, relative to the game root folder</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.CacheAssets(System.String,System.String)">
            <summary>
            Loads the asset bundle and asynchronously caches all the assets in it, if they haven't already been cached
            </summary>
            <param name="assetBundleName">The name of the asset bundle to cache</param>
            <param name="customPath">The custom path from root path to load the asset bundle from</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.CacheAssets(System.String)">
            <summary>
            Loads the asset bundle and asynchronously caches all the assets in it, if they haven't already been cached
            </summary>
            <param name="assetBundleName">The name of the asset bundle to cache</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file (Must be located in the 'mods' folder for this method)</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <param name="customPath">The custom path of the asset bundle, starts from your mods root folder</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an asset bundle
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an assetbundle
            </summary>
            <typeparam name="T">The type of the object in the assetbundle</typeparam>
            <param name="assetBundleName">The name of the assetbundle file</param>
            <param name="objectName">The name of the object you want to get from the assetbundle</param>
            <param name="customPath">The custom path where the assetbundle is located, from your mods root folder</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.ClearCache">
            <summary>
            Clears the cache for loaded assets
            </summary>
        </member>
        <member name="T:ModLibrary.DataSaver">
            <summary>
            Used to store data in the SaveData folder, make sure SaveData is set to a persistant folder in your mod data json file if you want the data to persist across mod updates
            </summary>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadByte(System.String)">
            <summary>
            Loads a byte from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A byte stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadUInt16(System.String)">
            <summary>
            Loads a ushort from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A short stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadUInt32(System.String)">
            <summary>
            Loads a uint from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A uint stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadUInt64(System.String)">
            <summary>
            Loads a ulong from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A ulong stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadSByte(System.String)">
            <summary>
            Loads a sbyte from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A sbyte stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadInt16(System.String)">
            <summary>
            Loads a short from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A short stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadInt32(System.String)">
            <summary>
            Loads a int from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A int stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadInt64(System.String)">
            <summary>
            Loads a long from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A long stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadSingle(System.String)">
            <summary>
            Loads a float from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A float stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadDouble(System.String)">
            <summary>
            Loads a double from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A double stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadDecimal(System.String)">
            <summary>
            Loads a decimal from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A decimal stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadChar(System.String)">
            <summary>
            Loads a char from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A char stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadString(System.String)">
            <summary>
            Loads a string from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A string stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadBool(System.String)">
            <summary>
            Loads a bool from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A bool stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadEnum``1(System.String)">
            <summary>
            Loads a enum from the Primitives.json file with the provided key
            </summary>
            <param name="key">The key associated with the value</param>
            <returns>A enum stored in the Primitives.json file</returns>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Byte)">
            <summary>
            Saves a byte value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The byte you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.UInt16)">
            <summary>
            Saves a ushort value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The ushort you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.UInt32)">
            <summary>
            Saves a uint value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The uint you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.UInt64)">
            <summary>
            Saves a ulong value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The ulong you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.SByte)">
            <summary>
            Saves a sbyte value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The sbyte you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Int16)">
            <summary>
            Saves a short value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The short you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Int32)">
            <summary>
            Saves a int value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The int you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Int64)">
            <summary>
            Saves a long value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The long you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Single)">
            <summary>
            Saves a float value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The float you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Double)">
            <summary>
            Saves a double value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The double you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Decimal)">
            <summary>
            Saves a decimal value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The decimal you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Char)">
            <summary>
            Saves a char value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The char you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.String)">
            <summary>
            Saves a string value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The string you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveData(System.String,System.Boolean)">
            <summary>
            Saves a bool value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The bool you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveEnum``1(System.String,``0)">
            <summary>
            Saves a enum value in the Primitives.json file, please remember that this calls File.WriteAllText so please dont call it in update
            </summary>
            <param name="key">The key you want associated with the value</param>
            <param name="value">The enum you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.SaveCustomType``1(System.String,``0)">
            <summary>
            Saves a custom type in the CustomTypes folder, please dont call this in update as it calls File.WriteAllText
            </summary>
            <typeparam name="Type">The type of the object you want to save</typeparam>
            <param name="key">The key you want associated with the value you want to save</param>
            <param name="value">The value you want to save</param>
        </member>
        <member name="M:ModLibrary.DataSaver.LoadCustomType``1(System.String)">
            <summary>
            Loads a custom type from the CustomTypes folder, please dont call this in update as it calls File.ReadAllText
            </summary>
            <typeparam name="Type">The type of the object you want to save</typeparam>
            <param name="key">The key associated with the value you want to load</param>
            <returns>The loading value</returns>
        </member>
        <member name="T:ModLibrary.Generic2ButtonDialogue">
            <summary>
            Used to bring up a dialoge with 2 buttons
            </summary>
        </member>
        <member name="P:ModLibrary.Generic2ButtonDialogue.IsWindowOpen">
            <summary>
            If this is <see langword="true"/> there is currently a <see cref="T:ModLibrary.Generic2ButtonDialogue"/> open
            </summary>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.#ctor(System.String,System.String,System.Action,System.String,System.Action,System.Nullable{UnityEngine.Vector2})">
            <summary>
            Creates a dialoge where the user can select one of 2 options
            </summary>
            <param name="message">The text that will be displayed on screen</param>
            <param name="button1Text">The text on the first button</param>
            <param name="onPressButton1">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
            <param name="button2Text">The text on the second button</param>
            <param name="onPressButton2">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
            <param name="size">The size of window</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.#ctor(System.String,System.String,System.Action,System.String,System.Action)">
            <summary>
            Creates a dialoge where the user can select one of 2 options
            </summary>
            <param name="message">The text that will be displayed on screen</param>
            <param name="button1Text">The text on the first button</param>
            <param name="onPressButton1">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
            <param name="button2Text">The text on the second button</param>
            <param name="onPressButton2">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.SetColorOfFirstButton(UnityEngine.Color)">
            <summary>
            Sets the color of the first button
            </summary>
            <param name="color">The color to set the button to</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.SetColorOfSecondButton(UnityEngine.Color)">
            <summary>
            Sets the color of the second button
            </summary>
            <param name="color">The color to set the button to</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.Close">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="T:ModLibrary.ModInfo">
            <summary>
            Describes information about a mod, most of this information will come from the ModInfo.json file in your mod
            </summary>
        </member>
        <member name="M:ModLibrary.ModInfo.AreAllEssentialFieldsAssigned(System.String@)">
            <summary>
            Checks if all required fields are filled out
            </summary>
            <param name="errorMessage">If some field is not filled out, information about which field wasn't filled out. Otherwise null</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModInfo.FixFieldValues">
            <summary>
            Fixes some fields if they are not properly assigned, should only really be used from mod-bot internals
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.DisplayName">
            <summary>
            The name of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.UniqueID">
            <summary>
            The uuid of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.MainDLLFileName">
            <summary>
            The name of the main dll of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.Version">
            <summary>
            The mod version
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.ImageFileName">
            <summary>
            The name of the tumbnail image that goes with the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.Description">
            <summary>
            A brief description of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.ModDependencies">
            <summary>
            The uuids of the dependecies of this mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.Tags">
            <summary>
            The tags used on this mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.FolderPath">
            <summary>
            The complete path to this mods folder
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.DLLPath">
            <summary>
            The complete path to the main dll file of the mod
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.HasImage">
            <summary>
            True if this mod has an image provided, false otherwise
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.CachedImage">
            <summary>
            The image to be displayed in the mods menu
            </summary>
        </member>
        <member name="P:ModLibrary.ModInfo.IsModEnabled">
            <summary>
            NOTE: setting this value only sets the playerPrefs, use <see cref="P:InternalModBot.LoadedModInfo.IsEnabled"/> to work with loaded mods
            </summary>
        </member>
        <member name="T:ModLibrary.CodeInstrucionComparisonMode">
            <summary>
            Specifies what determines if two <see cref="T:HarmonyLib.CodeInstruction"/>s are considered equal
            </summary>
        </member>
        <member name="F:ModLibrary.CodeInstrucionComparisonMode.OpCode">
            <summary>
            Compare the <see cref="F:HarmonyLib.CodeInstruction.opcode"/> field from both instances
            </summary>
        </member>
        <member name="F:ModLibrary.CodeInstrucionComparisonMode.Operand">
            <summary>
            Compare the <see cref="F:HarmonyLib.CodeInstruction.operand"/> field from both instances
            </summary>
        </member>
        <member name="F:ModLibrary.CodeInstrucionComparisonMode.OpCodeAndOperand">
            <summary>
            Compare both the <see cref="F:HarmonyLib.CodeInstruction.opcode"/> and <see cref="F:HarmonyLib.CodeInstruction.operand"/> fields from both instances
            </summary>
        </member>
        <member name="T:ModLibrary.LevelEditorModdedMetadataManager">
            <summary>
            Handles reading/writing modded level metadata in the level editor
            </summary>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.IsCurrentlyEditingLevel">
            <summary>
            Returns if the level editor is active, and a level is loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata">
            <summary>
            Gets the modded metadata in the current level owned by the caller mod instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata(LevelEditorLevelData)">
            <summary>
            Gets the modded metadata in <paramref name="level"/> owned by the caller mod instance
            </summary>
            <param name="level">The level to search for metadata</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata(LevelDescription)">
            <summary>
            Gets the modded metadata in <paramref name="level"/> owned by the caller mod instance
            </summary>
            <param name="level">The level to search for metadata</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata(ModLibrary.Mod)">
            <summary>
            Gets the modded metadata in the current level owned by <paramref name="owner"/>
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns the metadata</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata(ModLibrary.Mod,LevelDescription)">
            <summary>
            Gets the modded metadata in <paramref name="levelDescription"/> owned by <paramref name="owner"/>
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns the metadata</param>
            <param name="levelDescription">The level to search for metadata</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.GetMetadata(ModLibrary.Mod,LevelEditorLevelData)">
            <summary>
            Gets the modded metadata in <paramref name="levelData"/> owned by <paramref name="owner"/>
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns the metadata</param>
            <param name="levelData">The level to search for metadata</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.TrySetMetadata(System.String,System.String)">
            <summary>
            Attempts to set the modded metadata of the current level open in the level editor
            </summary>
            <remarks>
            Modded metadata is stored in the <see cref="T:LevelEditorLevelData"/> class as a <see cref="T:System.Collections.Generic.Dictionary`2"/>(<see cref="T:System.String"/>, <see cref="T:System.String"/>)
            <br/>
            This method uses the caller's ModID as the key in this <see cref="T:System.Collections.Generic.Dictionary`2"/>, and a json serialized <see cref="T:System.Collections.Generic.Dictionary`2"/>(<see cref="T:System.String"/>, <see cref="T:System.String"/>) as its value, the <paramref name="key"/> and <paramref name="value"/> arguments are used as the key and value in this serialized <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </remarks>
            <param name="key">The key to store the <paramref name="value"/> with, must not be <see langword="null"/>, empty, or whitespace</param>
            <param name="value">The value to store with the <paramref name="key"/>, can be any string value, including <see langword="null"/></param>
            <returns>If the metadata of the current level was successfully set</returns>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is <see langword="null"/>, empty, or whitespace</exception>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.TryGetMetadata(System.String,System.String@)">
            <summary>
            Attempts to read the modded metadata of the current level that is either open in the level editor or currently being played
            </summary>
            <remarks>
            Modded metadata is stored in the <see cref="T:LevelEditorLevelData"/> class as a <see cref="T:System.Collections.Generic.Dictionary`2"/>(<see cref="T:System.String"/>, <see cref="T:System.String"/>)
            <br/>
            This method uses the caller's ModID as the key in this <see cref="T:System.Collections.Generic.Dictionary`2"/>, and a json serialized <see cref="T:System.Collections.Generic.Dictionary`2"/>(<see cref="T:System.String"/>, <see cref="T:System.String"/>) as its value, the <paramref name="key"/> and <paramref name="value"/> arguments are used as the key and value in this serialized <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </remarks>
            <param name="key">The key to read the stored value of, must not be <see langword="null"/>, empty, or whitespace</param>
            <param name="value">The stored metadata value, or <see langword="null"/> if the operation was unsuccessful.</param>
            <returns><see langword="true"/> if a value was successfully read from the level metadata, <see langword="false"/> if not</returns>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is <see langword="null"/>, empty, or whitespace</exception>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.TryGetMetadata(LevelDescription,System.String,System.String@)">
            <summary>
            Attempts to read a value of the modded metadata of a <see cref="T:LevelDescription"/>
            </summary>
            <param name="levelDescription">The level to read the metadata of</param>
            <param name="key">The key to use when retrieving the metadata value</param>
            <param name="value">The value stored in the metadata with the specified key</param>
            <returns><see langword="true"/> if <paramref name="key"/> exists in the metadata of <paramref name="levelDescription"/>, and <see langword="false"/> if not, or the level data couldn't be loaded</returns>
        </member>
        <member name="M:ModLibrary.LevelEditorModdedMetadataManager.TryGetMetadata(LevelEditorLevelData,System.String,System.String@)">
            <summary>
            Attempts to read a value of the modded metadata of a <see cref="T:LevelEditorLevelData"/>
            </summary>
            <param name="levelData">The level data to read the metadata of</param>
            <param name="key">The key to use when retrieving the metadata value</param>
            <param name="value">The value stored in the metadata with the specified key</param>
            <returns><see langword="true"/> if <paramref name="key"/> exists in the metadata of <paramref name="levelData"/>, and <see langword="false"/> if not</returns>
        </member>
        <member name="T:ModLibrary.InjectionPostfixTargetAttribute">
            <summary>
            Patches the target property with whatever method it's applied to as the postfix. See <see href="https://harmony.pardeike.net/articles/patching-postfix.html"/> for details about how postfixes work.<para/>Generic methods are not officially supported by 0Harmony and cannot be patched by using this attribute.
            </summary>
        </member>
        <member name="M:ModLibrary.InjectionPostfixTargetAttribute.#ctor(System.Type,System.String,System.Type[])">
            <summary>
            Initializes the <see cref="T:ModLibrary.InjectionPostfixTargetAttribute"/> attribute with a target method
            </summary>
            <param name="type">The type the target method is attached to</param>
            <param name="methodName">The name of the target method</param>
            <param name="methodParameters">The parameter types on the target method</param>
        </member>
        <member name="T:ModLibrary.InjectionPrefixTargetAttribute">
            <summary>
            Patches the target method with whatever method it's applied to as the prefix. See <see href="https://harmony.pardeike.net/articles/patching-prefix.html"/> for details about how prefixes work.<para/>Generic methods are not officially supported by 0Harmony and cannot be patched by using this attribute.
            </summary>
        </member>
        <member name="M:ModLibrary.InjectionPrefixTargetAttribute.#ctor(System.Type,System.String,System.Type[])">
            <summary>
            Initializes the <see cref="T:ModLibrary.InjectionPrefixTargetAttribute"/> attribute with a target method
            </summary>
            <param name="type">The type the target method is attached to</param>
            <param name="methodName">The name of the target method</param>
            <param name="methodParameters">The parameter types on the target method</param>
        </member>
        <member name="T:ModLibrary.debug">
            <summary>
            Allows you to write to the in-game console (open it with F1).
            </summary>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String)">
            <summary>
            Writes to the in-game console.
            </summary>
            <param name="_log">What to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.Object)">
            <summary>
            Writes the given object's <see cref="M:System.Object.ToString"/> value to the console
            </summary>
            <param name="_log">The object to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.Object,UnityEngine.Color)">
            <summary>
            Writes the given object's <see cref="M:System.Object.ToString"/> value to the console with the specified <see cref="T:UnityEngine.Color"/>
            </summary>
            <param name="_log">The <see cref="T:System.Object"/> to log</param>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes to the in-game console, in color.
            </summary>
            <param name="_log">What to write</param>
            <param name="_color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Passes every instance of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>s <see cref="M:System.Object.ToString"/> value to <see cref="M:ModLibrary.debug.Log(System.String)"/>
            </summary>
            <typeparam name="T">The type of the collection to write</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to write</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0},UnityEngine.Color)">
            <summary>
            Passes every instance of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>s <see cref="M:System.Object.ToString"/> value to <see cref="M:ModLibrary.debug.Log(System.String)"/>
            </summary>
            <typeparam name="T">The type of the collection to write</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to write</param>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draws a line from one point to another in a specified color
            </summary>
            <param name="point1">Point to draw from</param>
            <param name="point2">Point to draw to</param>
            <param name="color">The color to draw in</param>
            <param name="timeToStay">The amount of unscaledTime in seconds to render the line</param>
        </member>
        <member name="M:ModLibrary.debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draws a ray from a point in a direction. The ray will always have a length of 1000 units
            </summary>
            <param name="point">The point to draw from</param>
            <param name="direction">The direction to draw in</param>
            <param name="color">The color to draw in</param>
            <param name="timeToStay">The amount of unscaledTime in seconds to render the line</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAllChildren(UnityEngine.Transform)">
            <summary>
            Opens a notepad window with info about the passed transfrom like components and children
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ModLibrary.Injector">
            <summary>
            Used to inject pre and post injections into a target method
            </summary>
        </member>
        <member name="F:ModLibrary.Injector.FLAGS">
            <summary>
            The flags that should be used when getting the methods to inject
            </summary>
        </member>
        <member name="M:ModLibrary.Injector.InjectPrefix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the start of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <param name="injectTargetMethod">The name of the method to inject into</param>
            <param name="prefixTargetMethod">The name of the prefix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectPrefix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to <paramref name="sourceMethod"/> to <paramref name="targetMethod"/> that will be called at the start of the method.
            </summary>
            <param name="targetMethod">The method to inject into</param>
            <param name="sourceMethod">The method to inject a call to</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectPostfix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the end of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetMethod">The name of the method to inject into</param>
            <param name="postfixTargetMethod">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectPostfix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to sourceMethod to targetMethod that will be called at the end of the method.
            </summary>
            <param name="targetMethod">The method to inject into</param>
            <param name="sourceMethod">The method to inject a call to</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectPrefixAndPostfix``3(System.String,System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod and PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetMethod">The name of the method to inject into</param>
            <param name="prefixTargetMethod">The name of the prefix method</param>
            <param name="postfixTargetMethod">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectPrefixAndPostfix(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to sourceMethodPrefix and sourceMethodPostfix to targetMethod
            </summary>
            <param name="targetMethod">The method to inject into</param>
            <param name="sourceMethodPrefix">The prefix method</param>
            <param name="sourceMethodPostfix">The postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPrefix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the start of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <param name="injectTargetProperty">The name of the method to inject into</param>
            <param name="prefixTargetProperty">The name of the prefix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPrefix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource to targetProperty that will be called at the start of the method.
            </summary>
            <param name="targetProperty">The property to inject to</param>
            <param name="prefixSource">The source of the injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPostfix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the end of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetProperty">The name of the method to inject into</param>
            <param name="postfixTargetProperty">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPostfix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource to targetProperty that will be called at the end of the method.
            </summary>
            <param name="targetProperty">The property to inject to</param>
            <param name="postfixSource">The source of the injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPrefixAndPostfix``3(System.String,System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod and PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetMethod">The name of the method to inject into</param>
            <param name="prefixTargetMethod">The name of the prefix method</param>
            <param name="postfixTargetMethod">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectGetPropertyPrefixAndPostfix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource and postfixSource to targetProperty
            </summary>
            <param name="targetProperty">The property to inject to</param>
            <param name="prefixSource">The source of the prefix injection</param>
            <param name="postfixSource">The source of the postfix injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPrefix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the start of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <param name="injectTargetProperty">The name of the method to inject into</param>
            <param name="prefixTargetProperty">The name of the prefix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPrefix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource to targetProperty that will be called at the start of the method.
            </summary>
            <param name="targetProperty">The property to inject into</param>
            <param name="prefixSource">The source of the prefix injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPostfix``2(System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod that will be called at the end of the method.
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetProperty">The name of the method to inject into</param>
            <param name="postfixTargetProperty">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPostfix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource to targetProperty that will be called at the end of the method.
            </summary>
            <param name="targetProperty">The property to inject into</param>
            <param name="postfixSource">The source of the postfix injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPrefixAndPostfix``3(System.String,System.String,System.String,ModLibrary.Mod)">
            <summary>
            Adds a call to PrefixTarget.prefixTargetMethod and PostfixTarget.postfixTargetMethod to InjectionTarget.injectTargetMethod
            </summary>
            <typeparam name="InjectionTarget">The type of the method to inject into</typeparam>
            <typeparam name="PrefixTarget">The type of the prefix method</typeparam>
            <typeparam name="PostfixTarget">The type of the postfix method</typeparam>
            <param name="injectTargetMethod">The name of the method to inject into</param>
            <param name="prefixTargetMethod">The name of the prefix method</param>
            <param name="postfixTargetMethod">The name of the postfix method</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="M:ModLibrary.Injector.InjectSetPropertyPrefixAndPostfix(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,ModLibrary.Mod)">
            <summary>
            Adds a call to prefixSource to targetProperty that will be called at the end of the method.
            </summary>
            <param name="targetProperty">The property to inject into</param>
            <param name="prefixSource">The source of the prefix injection</param>
            <param name="postfixSource">The source of the postfix injection</param>
            <param name="mod">The owner of this injection</param>
        </member>
        <member name="T:ModLibrary.MainModClassAttribute">
            <summary>
            Put this on the mod class in your mod. the target class will act as the "Main" call of your mod
            </summary>
        </member>
        <member name="T:ModLibrary.Mod">
            <summary>
            Base class for all mods, contains virtual implementations for different events in the game.
            </summary>
        </member>
        <member name="P:ModLibrary.Mod.ModInfo">
            <summary>
            The modinfo that goes with this Mod, this contains data about the mod name, version ect.
            </summary>
        </member>
        <member name="P:ModLibrary.Mod.HarmonyID">
            <summary>
            Returns an ID you should use when harmony patching in this mod, this is to help mod-bot clean up patches made by this mod.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterSpawned(Character)">
            <summary>
            Called in <see cref="M:Character.Start"/>
            </summary>
            <param name="character">The <see cref="T:Character"/> that was spawned</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterUpdate(Character)">
            <summary>
            Called in <see cref="!:Character.Update"/>
            </summary>
            <param name="character">The <see cref="T:Character"/> that was updated</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModRefreshed">
            <summary>
            Called in <see cref="M:InternalModBot.ModsManager.ReloadMods"/>
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnLevelEditorStarted">
            <summary>
            Called when the level editor is started.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnCommandRan(System.String)">
            <summary>
            Called when you run a command in the console (mostly for debuging).
            </summary>
            <param name="command">The text entered into the command field of the console</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterKilled(Character,Character,DamageSourceType,System.Int32)">
            <summary>
            Called in <see cref="!:Character.onDeath(Character, DamageSourceType, int)"/>
            </summary>
            <param name="killedCharacter">The <see cref="T:Character"/> that was killed</param>
            <param name="killerCharacter">The killer <see cref="T:Character"/></param>
            <param name="damageSourceType">The cause of death</param>
            <param name="attackID">The attack ID that killed <paramref name="killedCharacter"/></param>
        </member>
        <member name="M:ModLibrary.Mod.OnModDeactivated">
            <summary>
            Called when the mod is deactivated from the mods menu, override this method to perform additional cleanup, like remove/disable all added components, reset values in classes, etc. Modded upgrades are automatically hidden when the owner mod is disabled
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.ImplementsSettingsWindow">
            <summary>
            If this returns <see langword="true"/> it will active the mod settings button in the mods window for this mod.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.CreateSettingsWindow(ModLibrary.ModOptionsWindowBuilder)">
            <summary>
            Gets called when the user clicks on the mod settings button in the mods window. Allows you to create a neat little UI that saves the values for you. Get the values set by this with SettingsManager.Instance.GetModdedSettingsBoolValue, GetModdedSettingsStringValue, GetModdedSettingsIntValue and GetModdedSettingsFloatValue
            </summary>
            <param name="builder">The object used to build the UI.</param>
        </member>
        <member name="M:ModLibrary.Mod.ShouldCursorBeEnabled">
            <summary>
            If this returns <see langword="true"/> the cursor will get enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GlobalUpdate">
            <summary>
            Called every frame
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnModEnabled">
            <summary>
            Called when the mod gets loaded or enabled after previously being disabled
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnResourcesLoad(System.String)">
            <summary>
            Will be called just before anything tries to load something from the Resources folder. If this returns <see langword="null"/> it will continue like normal, but if this returns anything else than <see langword="null"/> that will be returned by <see cref="M:UnityEngine.Resources.Load(System.String)"/> instead.
            </summary>
            <param name="path">The path specified</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.OnLanguageChanged(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets called when the language dictionary gets populated, use this method to add or change the dictionary when the language will be changed
            </summary>
            <param name="newLanguageID">The language ID that was switched to</param>
            <param name="localizationDictionary">The dictionary containing all IDs and localized strings, key string is an ID, value string is the text that will be displayed</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModLoaded">
            <summary>
            Gets called directly after the mod is loaded. WARNING: Any exceptions thrown in the method will not be displayed by the <see cref="T:ErrorManager"/> since is hasn't been initialized at this point in time, if an exception is thrown, the game will pause itself before the title screen appears. The crahs log can still be found in the outbut_log.txt file
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnClientConnectedToServer">
            <summary>
            Called when we connect to a multiplayer server
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnClientDisconnectedFromServer">
            <summary>
            Called when we disconnect from a multiplayer server
            </summary>
        </member>
        <member name="T:ModLibrary.KeyCodeInput">
            <summary>
            Manages the input of a custom KeyCode value in the modded options page
            </summary>
        </member>
        <member name="P:ModLibrary.KeyCodeInput.SelectedKey">
            <summary>
            Gets or sets the current KeyCode
            </summary>
        </member>
        <member name="M:ModLibrary.KeyCodeInput.AskForNewKey">
            <summary>
            Asks the user to input a new key, if the user does not do so in 4 seconds aborts and does nothing
            </summary>
        </member>
        <member name="T:ModLibrary.ModOptionsWindowBuilder">
            <summary>
            Used to place all of the options in the options window
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.PopulatePages">
            <summary>
            Removes all of the page buttons and spawns in new ones
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.RefreshPage(ModLibrary.ModOptionsWindowBuilder.Page)">
            <summary>
            Removes all of the page content and spawns everything again
            </summary>
            <param name="page">The name of the page to refresh</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.RefreshPage(System.Int32)">
            <summary>
            Removes all of the page content and spawns everything again (can crush the game if page with this index doesn't exist)
            </summary>
            <param name="pageIndex">The index of the page to refresh</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddPage(System.String,System.Nullable{System.Single})">
            <summary>
            Adds a new page, call methods on this page to add items to it. If a page with the same name already exists returns a reference to that page
            </summary>
            <param name="pageName">The name of the page to spawn</param>
            <param name="forcedHeight">If not null this will set the height of the page to this</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.CloseWindow">
            <summary>
            Closes the options window, this also opens its parent window (probably the mods window)
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.ForceCloseWindow">
            <summary>
            Closes the options window, does NOT open the parent window
            </summary>
        </member>
        <member name="T:ModLibrary.ModOptionsWindowBuilder.Page">
            <summary>
            Represents a page in the mod options window
            </summary>
        </member>
        <member name="F:ModLibrary.ModOptionsWindowBuilder.Page.Name">
            <summary>The name of the page</summary>
        </member>
        <member name="F:ModLibrary.ModOptionsWindowBuilder.Page.ForcedHeight">
            <summary>The forced height of the page, if null the height will be set automatically</summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddSlider(System.Single,System.Single,System.Single,System.String,System.String,System.Action{UnityEngine.UI.Slider},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.Single})">
            <summary>
            Adds a slider to the page with the passed arguements
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">The maximum value of the slider</param>
            <param name="defaultValue">The value the slider should be set to by default</param>
            <param name="displayName">The text you want to display next to the slider</param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the slider is created, use this to change properties of the slider</param>
            <param name="customRect">The custom rect of the slider, use this to change the position and scale of the slider</param>
            <param name="onChange">Called when the value of the slider is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddIntSlider(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Action{UnityEngine.UI.Slider},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.Int32})">
            <summary>
            Adds a slider with only whole numbers to the page with the passed arguements
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">The maximum value of the slider</param>
            <param name="defaultValue">The value the slider should be set to by default</param>
            <param name="displayName">The text you want to display next to the slider</param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the slider is created, use this to change properties of the slider</param>
            <param name="customRect">The custom rect of the slider, use this to change the position and scale of the slider</param>
            <param name="onChange">Called when the value of the slider is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddInputField(System.String,System.String,System.String,System.Action{UnityEngine.UI.InputField},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.String})">
            <summary>
            Adds a <see cref="T:UnityEngine.UI.InputField"/> to the page with the passed arguements
            </summary>
            <param name="defaultValue">The value the <see cref="T:UnityEngine.UI.InputField"/> should be set to by default</param>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.InputField"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.InputField"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="onChange">Called when the value of the <see cref="T:UnityEngine.UI.InputField"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddVerifyingInputField(System.String,System.String,System.String,System.Predicate{System.String},System.Action{UnityEngine.UI.InputField},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.String})">
            <summary>
            Adds a verifying <see cref="T:UnityEngine.UI.InputField"/> to the page with the specified arguments
            </summary>
            <param name="defaultValue">The value the <see cref="T:UnityEngine.UI.InputField"/> should be set to by default (NOTE: This value will not be checked by the <see cref="F:InternalModBot.ModdedOptionVerifyingInputFieldItem.Verify"/> predicate)</param>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="verificationPredicate">The <see cref="T:System.Predicate`1"/> to verify the contents of the <see cref="T:UnityEngine.UI.InputField"/> when it is changed</param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.InputField"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.InputField"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.InputField"/></param>
            <param name="onChange">Called when the value of the <see cref="T:UnityEngine.UI.InputField"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddCheckbox(System.Boolean,System.String,System.String,System.Action{UnityEngine.UI.Toggle},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.Boolean})">
            <summary>
            Adds a <see cref="T:UnityEngine.UI.Toggle"/> to the page with the passed arguements
            </summary>
            <param name="defaultValue">The value the <see cref="T:UnityEngine.UI.Toggle"/> should be set to by default</param>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.Toggle"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.Toggle"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.Toggle"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.Toggle"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.Toggle"/></param>
            <param name="onChange">Called when the value of the <see cref="T:UnityEngine.UI.Toggle"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddDropdown(System.String[],System.Int32,System.String,System.String,System.Action{UnityEngine.UI.Dropdown},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{System.Int32})">
            <summary>
            Adds a <see cref="T:UnityEngine.UI.Dropdown"/> to the page with the passed arguements
            </summary>
            <param name="options">The options of the dropdown</param>
            <param name="defaultValue">The index of the options to set by default</param>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.Dropdown"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.Dropdown"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="onChange">Called when the value of the <see cref="T:UnityEngine.UI.Dropdown"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddDropdown``1(``0,System.String,System.String,System.Action{UnityEngine.UI.Dropdown},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{``0})">
            <summary>
            Adds a <see cref="T:UnityEngine.UI.Dropdown"/> to the page with the options of the passed enum 
            </summary>
            <param name="defaultValue">The index of the enum to set by default</param>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.Dropdown"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.Dropdown"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.Dropdown"/></param>
            <param name="onChange">Called when the value of the <see cref="T:UnityEngine.UI.Dropdown"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddKeyCodeInput(UnityEngine.KeyCode,System.String,System.String,System.Action{ModLibrary.KeyCodeInput},System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{UnityEngine.KeyCode})">
            <summary>
            Adds a <see cref="T:ModLibrary.KeyCodeInput"/> to the page with the passed arguements
            </summary>
            <param name="defaultValue">The value the <see cref="T:ModLibrary.KeyCodeInput"/> should be set to by default</param>
            <param name="displayName">The text you want to display next to the <see cref="T:ModLibrary.KeyCodeInput"/></param>
            <param name="saveID">The Id used to get this value in the <see cref="T:ModLibrary.ModdedSettings"/> class</param>
            <param name="onCreate">Called when the <see cref="T:ModLibrary.KeyCodeInput"/> is created, use this to change properties of the <see cref="T:ModLibrary.KeyCodeInput"/></param>
            <param name="customRect">The custom rect of the <see cref="T:ModLibrary.KeyCodeInput"/>, use this to change the position and scale of the <see cref="T:ModLibrary.KeyCodeInput"/></param>
            <param name="onChange">Called when the value of the <see cref="T:ModLibrary.KeyCodeInput"/> is changed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddButton(System.String,System.Action,System.Nullable{ModLibrary.ModOptionsWindowBuilder.Rect},System.Action{UnityEngine.UI.Button})">
            <summary>
            Adds a <see cref="T:UnityEngine.UI.Button"/> to the page with the passed arguements
            </summary>
            <param name="displayName">The text you want to display next to the <see cref="T:UnityEngine.UI.Button"/></param>
            <param name="onClick">Called when the user clicks on the created <see cref="T:UnityEngine.UI.Button"/></param>
            <param name="customRect">The custom rect of the <see cref="T:UnityEngine.UI.Button"/>, use this to change the position and scale of the <see cref="T:UnityEngine.UI.Button"/></param>
            <param name="onCreate">Called when the <see cref="T:UnityEngine.UI.Button"/> is created, use this to change properties of the <see cref="T:UnityEngine.UI.Button"/></param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddLabel(System.String,System.Action{UnityEngine.UI.Text})">
            <summary>
            Adds a label (a bit of text) to the page
            </summary>
            <param name="displayName">The page to display</param>
            <param name="onCreate">Called when the label is created, use this to change the properties of the <see cref="T:UnityEngine.UI.Text"/></param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.Page.AddCustom(ModLibrary.ModdedOptionPageItem)">
            <summary>
            Adds a generic page item, use this to add your own item types! To create a new item type simply make a class that extends <see cref="T:ModLibrary.ModdedOptionPageItem"/> and pass a instance of it to this class
            </summary>
            <param name="customItem">The generic <see cref="T:ModLibrary.ModdedOptionPageItem"/> to add</param>
        </member>
        <member name="T:ModLibrary.ModOptionsWindowBuilder.Rect">
            <summary>
            Used to represent a position and scale of items in modded option window pages
            </summary>
        </member>
        <member name="F:ModLibrary.ModOptionsWindowBuilder.Rect.Position">
            <summary>
            The position of the item, if null keeps default values
            </summary>
        </member>
        <member name="F:ModLibrary.ModOptionsWindowBuilder.Rect.Scale">
            <summary>
            The Scale of the item, if null keeps defualt values
            </summary>
        </member>
        <member name="T:ModLibrary.ModdedOptionPageItem">
            <summary>
            A base class for modded option page items
            </summary>
        </member>
        <member name="F:ModLibrary.ModdedOptionPageItem.CustomRect">
            <summary>
            The custom rect of the page, if null uses default values
            </summary>
        </member>
        <member name="F:ModLibrary.ModdedOptionPageItem.DisplayName">
            <summary>
            The name that should be displayed on the option
            </summary>
        </member>
        <member name="F:ModLibrary.ModdedOptionPageItem.SaveID">
            <summary>
            The Id of the option
            </summary>
        </member>
        <member name="M:ModLibrary.ModdedOptionPageItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Should create the object you want to spawn as a child of holder
            </summary>
            <param name="holder">The object that the spawned object should be a child of</param>
            <param name="owner">The mod who spawned the option</param>
        </member>
        <member name="M:ModLibrary.ModdedOptionPageItem.applyCustomRect(UnityEngine.GameObject)">
            <summary>
            Applies the <see cref="F:ModLibrary.ModdedOptionPageItem.CustomRect"/> to the passed <see cref="T:UnityEngine.GameObject"/>, if <see cref="F:ModLibrary.ModdedOptionPageItem.CustomRect"/> is not <see langword="null"/>.
            </summary>
            <param name="spawnedObject"></param>
        </member>
        <member name="T:ModLibrary.GlobalEventManagerExtensions">
            <summary>
            Defines extension methods for the <see cref="T:GlobalEventManager"/> class
            </summary>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListenerOnce(GlobalEventManager,System.String,System.Action)">
            <summary>
            Adds an event that can be dispatched only once if it's not already defined
            </summary>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListenerOnce``1(GlobalEventManager,System.String,System.Action{``0})">
            <summary>
            Adds an event with an argument that can be dispatched only once if it's not already defined
            </summary>
            <typeparam name="T">The type of the argument to pass to the <see cref="T:System.Action`1"/> when the event is dispatched</typeparam>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListener``1(GlobalEventManager,System.String,System.Action{``0})">
            <summary>
            Adds an event with an argument that can be dispatched if it's not already defined
            </summary>
            <typeparam name="T">The type of the argument to pass to the <see cref="T:System.Action`1"/> when the event is dispatched</typeparam>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListener(GlobalEventManager,System.String,System.Action)">
            <summary>
            Adds an event that can be dispatched if it's not already defined
            </summary>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action"/> to invoke when the event is dispatched</param>
        </member>
        <member name="T:ModLibrary.IEnumerableExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetComponents``1(System.Collections.Generic.IEnumerable{UnityEngine.Component})">
            <summary>
            Gets all the <see cref="T:UnityEngine.Component"/>s of the given type in each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="ComponentType">The type of the <see cref="T:UnityEngine.Component"/> to get, must enherit from <see cref="T:UnityEngine.Component"/></typeparam>
            <param name="collection"></param>
            <returns>All components gotten from the <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.DestroyAll``1(System.Collections.Generic.IEnumerable{``0},System.Single)">
            <summary>
            Destroys all the objects in a collection of <see cref="T:UnityEngine.Object"/>
            </summary>
            <typeparam name="ObjectType">The type of object to destroy, must derive from <see cref="T:UnityEngine.Object"/></typeparam>
            <param name="objects"></param>
            <param name="waitBeforeDestroy">An optional wait in seconds before destroying the objects</param>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.DestroyAllImmediate``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Immediately destroys all the objects in a collection of <see cref="T:UnityEngine.Object"/>
            </summary>
            <typeparam name="ObjectType">The type of object to destroy, must derive from <see cref="T:UnityEngine.Object"/></typeparam>
            <param name="objects"></param>
            <param name="allowDestroyingAssets">An optional argument to determine if destroying assets is allowed</param>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type to cast all the field values to</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the fields from</param>
            <param name="fieldName">The name of the field to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the found fields with the given name casted to the given <typeparamref name="FieldType"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,``1,System.Reflection.BindingFlags)">
            <summary>
            Sets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the given value
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set all the fields in</param>
            <param name="fieldName">The name of the field to set from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="value">The value to set all the fields to</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1},System.Reflection.BindingFlags)">
            <summary>
            Sets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the value gotten by calling the given <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set all the fields in</param>
            <param name="fieldName">The name of the field to set from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="valueFunction">The <see cref="T:System.Func`2"/> used to get the value for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type to cast all the property values to</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the properties from</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the found properties with the given name casted to the given <typeparamref name="PropertyType"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,``1,System.Reflection.BindingFlags)">
            <summary>
            Sets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the given value
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type of the property</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set the properties in</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="value">The value to set all the fields to</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1},System.Reflection.BindingFlags)">
            <summary>
            Sets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the value gotten by calling the given <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type of the property</typeparam>
            <param name="collection">>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set the properties in</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="valueFunction">The <see cref="T:System.Func`2"/> used to get the value for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="arguments">The arguments to pass to the method, pass <see langword="null"/> for no arguments</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Object[]},System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="argumentFunction">The <see cref="T:System.Func`2"/> used to get the argument values for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/>, or the <paramref name="argumentFunction"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="arguments">The arguments to pass to all methods called, pass <see langword="null"/> for no arguments</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Object[]},System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="argumentFunction">The <see cref="T:System.Func`2"/> used to get the argument values for each instance if the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/>, or the <paramref name="argumentFunction"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetRandomOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random item from the collection, or the default value for the type if the collection is empty
            </summary>
            <typeparam name="CollectionType">The type of the collection</typeparam>
            <param name="collection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the order of elements in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the collection to randomize</typeparam>
            <param name="enumerable"></param>
            <returns>The randomized collection</returns>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.ReplaceRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Searches for a sequence in the collection which has the exact order and values as the <paramref name="findSequence"/> parameter, and replaces every found sequence by all items in <paramref name="replaceSequence"/>
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="collection">The collection to search</param>
            <param name="findSequence">The sequence of items to search for</param>
            <param name="replaceSequence">The sequence of items to be inserted in place of every found sequence</param>
            <param name="equalityFunc">A custom comparer to determine if an item in the searched collection is equal to an item in <paramref name="findSequence"/>, if <see langword="null"/>, uses the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for type <typeparamref name="T"/></param>
            <returns>A copy of the collection, with all sequences equal to <paramref name="findSequence"/> replaced by <paramref name="replaceSequence"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>, <paramref name="findSequence"/>, or <paramref name="replaceSequence"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="findSequence"/> is empty</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.ReplaceRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.EqualityComparer{``0})">
            <summary>
            Searches for a sequence in the collection which has the exact order and values as the <paramref name="findSequence"/> parameter, and replaces every found sequence by all items in <paramref name="replaceSequence"/>
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="collection">The collection to search</param>
            <param name="findSequence">The sequence of items to search for</param>
            <param name="replaceSequence">The sequence of items to be inserted in place of every found sequence</param>
            <param name="equalityComparer">A custom <see cref="T:System.Collections.Generic.EqualityComparer`1"/> to determine if an item in the searched collection is equal to an item in <paramref name="findSequence"/>, if <see langword="null"/>, uses the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for type <typeparamref name="T"/></param>
            <returns>A copy of the collection, with all sequences equal to <paramref name="findSequence"/> replaced by <paramref name="replaceSequence"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>, <paramref name="findSequence"/>, or <paramref name="replaceSequence"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="findSequence"/> is empty</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.ReplaceInstructions(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},ModLibrary.CodeInstrucionComparisonMode)">
            <summary>
            Searches for a sequence of instructions in the collection which has the exact order and values as the <paramref name="findInstructions"/> parameter, and replaces every found sequence by all items in <paramref name="replaceInstructions"/>
            </summary>
            <param name="instructions">The collection of instructions to search</param>
            <param name="findInstructions">The sequence of instructions to search for</param>
            <param name="replaceInstructions">The sequence of instructions to be inserted in place of every found sequence</param>
            <param name="comparisonMode">The bitwise flags to specify which part of each <see cref="T:HarmonyLib.CodeInstruction"/> to consider when checking for equality, default is <see cref="F:ModLibrary.CodeInstrucionComparisonMode.OpCode"/></param>
            <returns>A copy of the collection, with all sequences equal to <paramref name="findInstructions"/> replaced by <paramref name="replaceInstructions"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instructions"/>, <paramref name="findInstructions"/>, or <paramref name="replaceInstructions"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="findInstructions"/> is empty</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.ReplaceInstructions(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IEnumerable{System.Reflection.Emit.OpCode},System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Searches for a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s in the collection which has the exact order and matches the <see cref="T:System.Reflection.Emit.OpCode"/> of the <paramref name="findOpCodes"/> parameter, and replaces every found sequence by all items in <paramref name="replaceInstructions"/>
            </summary>
            <param name="instructions">The collection of instructions to search</param>
            <param name="findOpCodes">The sequence of <see cref="T:System.Reflection.Emit.OpCode"/>s to search for</param>
            <param name="replaceInstructions">The sequence of instructions to be inserted in place of every found sequence</param>
            <returns>A copy of the collection, with all sequences matching <paramref name="findOpCodes"/> replaced by <paramref name="replaceInstructions"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instructions"/>, <paramref name="findOpCodes"/>, or <paramref name="replaceInstructions"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="findOpCodes"/> is empty</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.ReplaceInstructions(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Func{HarmonyLib.CodeInstruction,HarmonyLib.CodeInstruction,System.Boolean})">
            <summary>
            Searches for a sequence of instructions in the collection which has the exact order and values as the <paramref name="findInstructions"/> parameter, and replaces every found sequence by all items in <paramref name="replaceInstructions"/>
            </summary>
            <param name="instructions">The collection of instructions to search</param>
            <param name="findInstructions">The sequence of instructions to search for</param>
            <param name="replaceInstructions">The sequence of instructions to be inserted in place of every found sequence</param>
            <param name="equalityFunc">A custom comparer to determine if a <see cref="T:HarmonyLib.CodeInstruction"/> in the searched collection is equal to a <see cref="T:HarmonyLib.CodeInstruction"/> in <paramref name="findInstructions"/></param>
            <returns>A copy of the collection, with all sequences equal to <paramref name="findInstructions"/> replaced by <paramref name="replaceInstructions"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instructions"/>, <paramref name="findInstructions"/>, <paramref name="replaceInstructions"/>, or <paramref name="equalityFunc"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="findInstructions"/> is empty</exception>
        </member>
        <member name="T:ModLibrary.SingleMethodExtensions">
            <summary>
            Dont call these methods directly from here
            </summary>
        </member>
        <member name="M:ModLibrary.SingleMethodExtensions.GetObject``1(ModdedObject,System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Object"/> at the specified index and casts it to type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the object at the index</typeparam>
            <param name="moddedObject"></param>
            <param name="index">The index of the <see cref="F:ModdedObject.objects"/> <see cref="T:System.Collections.Generic.List`1"/></param>
            <returns>The <see cref="T:UnityEngine.Object"/> at the specified index, casted to type <typeparamref name="T"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="moddedObject"/> is <see langword="null"/></exception>
            <exception cref="T:System.IndexOutOfRangeException">If the given index is outside the range of <see cref="F:ModdedObject.objects"/></exception>
            <exception cref="T:System.InvalidCastException">If the <see cref="T:UnityEngine.Object"/> at index <paramref name="index"/> is not of type <typeparamref name="T"/></exception>
        </member>
        <member name="M:ModLibrary.SingleMethodExtensions.IsModEnabled(ModLibrary.Mod)">
            <summary>
            Checks if the given <see cref="T:ModLibrary.Mod"/> is currently activated
            </summary>
            <param name="mod"></param>
            <returns><see langword="true"/> of the <see cref="T:ModLibrary.Mod"/> is enabled, <see langword="false"/> if it's disabled</returns>
        </member>
        <member name="M:ModLibrary.SingleMethodExtensions.GetLevelEditorLevelData(LevelDescription)">
            <summary>
            Loads and returns the <see cref="T:LevelEditorLevelData"/> associated with the <see cref="T:LevelDescription"/>
            </summary>
            <param name="levelDescription">The <see cref="T:LevelDescription"/> to get the <see cref="T:LevelEditorLevelData"/> of</param>
            <returns>The loaded <see cref="T:LevelEditorLevelData"/>, or <see langword="null"/> if it could not be found or loaded</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="levelDescription"/> is <see langword="null"/></exception>
        </member>
        <member name="T:ModLibrary.Vector3Extensions">
            <summary>
            Defines extension methods for <see cref="T:UnityEngine.Vector3"/>
            </summary>
        </member>
        <member name="M:ModLibrary.Vector3Extensions.GetDirectionTo(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the direction from one <see cref="T:UnityEngine.Vector3"/> to another
            </summary>
            <param name="startVector"></param>
            <param name="destinationVector">The <see cref="T:UnityEngine.Vector3"/> to get the direction to</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Vector3Extensions.GetDirectionToNormalized(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the normalized direction from one <see cref="T:UnityEngine.Vector3"/> to another
            </summary>
            <param name="startVector"></param>
            <param name="destinationVector">The <see cref="T:UnityEngine.Vector3"/> to get the direction to</param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.Layers">
            <summary>
            Defines constants that represent the different layers defined in the unity editor
            </summary>
        </member>
        <member name="F:ModLibrary.Layers.Default">
            <summary>
            Builtin Unity layer, default layer if none is defined
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.TransparentFX">
            <summary>
            Builtin Unity layer, used for the Voxel Particle System when cutting body parts
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.IgnoreRaycast">
            <summary>
            Builtin Unity layer, raycasts will ignore any objects with this layer
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Unassigned_3">
            <summary>
            Unassigned
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Water">
            <summary>
            Builtin Unity layer, unused in-game
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.UI">
            <summary>
            Builtin Unity layer, default layer for all UI
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Unassigned_6">
            <summary>
            Unassigned
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Unassigned_7">
            <summary>
            Unassigned
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.UnderArea">
            <summary>
            Layer for all objects under the arena, upgrade room, garbage shute, start area, etc
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CloneDroneLogo">
            <summary>
            Layer for the game logo on the title screen
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CentauriStation">
            <summary>
            Layer for the space station in chapter 2
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast">
            <summary>
            An object with this layer will be ignored when finding the spawn location of a twitch spawn (Raycast starts above the arena, and goes down until it finds an object without this layer), mostly used for triggers
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.ToolCamera">
            <summary>
            Used for the level editor tool handles (position, rotation, scale)
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.EnvironmentalHazards">
            <summary>
            Layer used for sawblades
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CutsceneCameraSet">
            <summary>
            Used for various cutscenes, like the ending of chapter 1, and the fleet overseer model on the screens in chapter 3
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.BluescreenNetwork">
            <summary>
            Used on all cutscene objects in the chapter 3 ending
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Environment">
            <summary>
            Used for nearly every object characters and projectiles collide with
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CharacterRoot">
            <summary>
            Layer used on the root object for all <see cref="T:Character"/>s
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.BodyPart">
            <summary>
            Layer for all <see cref="T:BaseBodyPart"/> components
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Projectile">
            <summary>
            Layer for all projectiles
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CameraCollider">
            <summary>
            Layer used on all <see cref="T:UnityEngine.Camera"/>s attached to a <see cref="T:Character"/>
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.EnvironmentRigidBodies">
            <summary>
            Same as <see cref="F:ModLibrary.Layers.Environment"/>, but for <see cref="T:UnityEngine.Rigidbody"/> objects
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CharacterObjectPusher">
            <summary>
            Used on an invisible collider on characters to push garbage and other <see cref="T:UnityEngine.Rigidbody"/> objects
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.BodyPartOnlyCollider">
            <summary>
            Unknown
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.FinalAreaObelisk">
            <summary>
            Used for the Last Bot Standing final area pillar
            </summary>
            <remarks>
            Collisions:<br/>
            ✔ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.CharacterOnlyCollider">
            <summary>
            Used for the InvisibleCharacterCollider level object
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.EnvironmentOnlyCollider">
            <summary>
            Unknown
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.BodyPartHitBox">
            <summary>
            Unknown
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.BattlecruiserShield">
            <summary>
            Used for the <see cref="!:BattleCruiserShields"/> model
            </summary>
            <remarks>
            Collisions:<br/>
            ❌ <see cref="F:ModLibrary.Layers.Default"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.TransparentFX"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.IgnoreRaycast"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_3"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Water"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UI"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_6"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_7"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.UnderArea"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CloneDroneLogo"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CentauriStation"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.IgnoreDuringTwitchSpawnRaycast"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.ToolCamera"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentalHazards"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CutsceneCameraSet"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BluescreenNetwork"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.Environment"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterRoot"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPart"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Projectile"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CameraCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentRigidBodies"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterObjectPusher"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.FinalAreaObelisk"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.CharacterOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.EnvironmentOnlyCollider"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BodyPartHitBox"/><br/>
            ❌ <see cref="F:ModLibrary.Layers.BattlecruiserShield"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.PlanetEarth"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_30"/><br/>
            ✔ <see cref="F:ModLibrary.Layers.Unassigned_31"/><br/>
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.PlanetEarth">
            <summary>
            Used for the Earth planet object in chapter 5
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Unassigned_30">
            <summary>
            Unassigned
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="F:ModLibrary.Layers.Unassigned_31">
            <summary>
            Unassigned
            </summary>
            <remarks>
            Collides with every layer
            </remarks>
        </member>
        <member name="T:ModLibrary.ModdedSettings">
            <summary>
            Used to save and set modded settings
            </summary>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsStringValue(ModLibrary.Mod,System.String,System.String)">
            <summary>
            Gets a <see cref="T:System.String"/> value saved in the loaded settings
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsStringValue(System.String,System.String)">
            <summary>
            Gets a <see cref="T:System.String"/> value saved in the loaded settings.
            </summary>
            <param name="id">The id of the setting.</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found.</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found.</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsFloatValue(ModLibrary.Mod,System.String,System.Single)">
            <summary>
            Gets a <see langword="float"/> value saved in the loaded settings
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsFloatValue(System.String,System.Single)">
            <summary>
            Gets a <see langword="float"/> value saved in the loaded settings
            </summary>
            <param name="id">The id of the setting.</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found.</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found.</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsIntValue(ModLibrary.Mod,System.String,System.Int32)">
            <summary>
            Gets a <see langword="int"/> value saved in the loaded settings
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsIntValue(System.String,System.Int32)">
            <summary>
            Gets a <see langword="int"/> value saved in the loaded settings
            </summary>
            <param name="id">The id of the setting.</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found.</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found.</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsBoolValue(ModLibrary.Mod,System.String,System.Boolean)">
            <summary>
            Gets a <see langword="bool"/> value saved in the loaded settings
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsBoolValue(System.String,System.Boolean)">
            <summary>
            Gets a <see langword="bool"/> value saved in the loaded settings
            </summary>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsKeyCodeValue(ModLibrary.Mod,System.String,UnityEngine.KeyCode)">
            <summary>
            Gets a <see cref="T:UnityEngine.KeyCode"/> value saved in the loaded settings
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.GetModdedSettingsKeyCodeValue(System.String,UnityEngine.KeyCode)">
            <summary>
            Gets a <see cref="T:UnityEngine.KeyCode"/> value saved in the loaded settings
            </summary>
            <param name="id">The id of the setting</param>
            <param name="defaultValue">The value that should be returned if no saved setting could be found</param>
            <returns>The value of the setting, will be the value of defaultValue if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsStringValue(ModLibrary.Mod,System.String,System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.String"/> value in the modded settings 
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns this setting</param>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsStringValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.String"/> value in the modded settings 
            </summary>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsFloatValue(ModLibrary.Mod,System.String,System.Single,System.Boolean)">
            <summary>
            Sets a <see langword="float"/> value in the loaded settings 
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns this setting</param>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsFloatValue(System.String,System.Single,System.Boolean)">
            <summary>
            Sets a <see langword="float"/> value in the loaded settings 
            </summary>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsIntValue(ModLibrary.Mod,System.String,System.Int32,System.Boolean)">
            <summary>
            Sets a <see langword="int"/> value in the loaded settings 
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns this setting</param>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsIntValue(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets a <see langword="int"/> value in the loaded settings 
            </summary>
            <param name="saveID">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsBoolValue(ModLibrary.Mod,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets a <see langword="bool"/> value in the loaded settings 
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns this setting</param>
            <param name="id">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsBoolValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets a <see langword="bool"/> value in the loaded settings 
            </summary>
            <param name="id">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsKeyCodeValue(ModLibrary.Mod,System.String,UnityEngine.KeyCode,System.Boolean)">
            <summary>
            Sets a <see cref="T:UnityEngine.KeyCode"/> value in the loaded settings 
            </summary>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns this setting</param>
            <param name="id">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.SetModdedSettingsKeyCodeValue(System.String,UnityEngine.KeyCode,System.Boolean)">
            <summary>
            Sets a <see cref="T:UnityEngine.KeyCode"/> value in the loaded settings 
            </summary>
            <param name="id">The id of the setting</param>
            <param name="value">The value you want to set the setting to</param>
            <param name="writeToFile"><see langword="true"/> if the setting should be written to the save file immediately, <see langword="false"/> if not. It is recommended to set this to <see langword="false"/> and then calling <see cref="M:ModLibrary.ModdedSettings.WriteSettingsToFile"/> if you set values often</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.WriteSettingsToFile">
            <summary>
            Saves all settings to the settings file, use this to manually write to the file if you passed <see langword="false"/> to any of the SetModdedSettings_____Value methods
            </summary>
        </member>
        <member name="M:ModLibrary.ModdedSettings.HasSetting(ModLibrary.Mod,System.String)">
            <summary>
            Returns if a setting with the given owner and ID is saved
            </summary>
            <param name="owner">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="saveID">The ID of the setting</param>
        </member>
        <member name="M:ModLibrary.ModdedSettings.HasSetting(System.String)">
            <summary>
            Returns if a setting with the given owner and ID is saved
            </summary>
            <param name="saveID">The ID of the setting</param>
        </member>
        <member name="T:ModLibrary.EnumTools">
            <summary>
            General tools to help you when working with enums!
            </summary>
        </member>
        <member name="M:ModLibrary.EnumTools.GetName``1(``0)">
            <summary>
            Gets the name of the given value in an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If value is <see langword="null"/> or <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T">The type of <see langword="enum"/> to get the name from</typeparam>
            <param name="value">The value assigned to an entry in the specified <see langword="enum"/></param>
            <returns>The name of the entry with the value <paramref name="value"/></returns>
        </member>
        <member name="M:ModLibrary.EnumTools.GetNames``1">
            <summary>
            Gets all names in the given <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.EnumTools.GetValues``1">
            <summary>
            Gets all values of an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ModToolExtensionMethods">
            <summary>
            Extention methods implemented by mod tools, don't call these directly.
            </summary>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllEnemyCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all enemy <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all enemy <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyPart(Character,MechBodyPartType)">
            <summary>
            Gets the first found <see cref="T:MechBodyPart"/> of the given <see cref="T:MechBodyPartType"/> (Returns <see langword="null"/> if the given <see cref="T:Character"/> does not have the specified <see cref="T:MechBodyPartType"/>)
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyParts(Character,MechBodyPartType)">
            <summary>
            Gets all <see cref="T:MechBodyPart"/>s of the given <see cref="T:MechBodyPartType"/>
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBaseBodyPart(Character,MechBodyPartType)">
            <summary>
            Gets the first found <see cref="T:BaseBodyPart"/> of the given <see cref="T:MechBodyPartType"/> (Returns <see langword="null"/> if the given <see cref="T:Character"/> does not have the specified <see cref="T:MechBodyPartType"/>)
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBaseBodyParts(Character,MechBodyPartType)">
            <summary>
            Gets all <see cref="T:BaseBodyPart"/>s of the given <see cref="T:MechBodyPartType"/>
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Brazilian_Portuguese">
             <summary>
               Looks up a localized string similar to modsbutton:MODIFICAÇÕES
            newversion_message:Nova versão Mod-Bot disponível: {0}\n(versão atual: {1})
            newversion_dismiss:Dispensar
            newversion_install:Instalar
            modbotversion:Versão Mod-Bot: {0}
            modbotuptodate:Versão Mod-Bot &apos;{0}&apos; atualizada!
            ignoreallcrashes_savedwarning:Mensagem de opção salva (IgnoreCrashes): todas as falhas estão sendo ignoradas; isso só deve ser ativado para fins de teste; desative-o digitando &quot;ignoreallcrashes 0&quot; no console.
            ignoreallcrashes_on:O jogo agora está ignorando todas as  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_English">
             <summary>
               Looks up a localized string similar to modsbutton:MODS
            newversion_message:New Mod-Bot version available: {0}\n(Current version: {1})
            newversion_dismiss:Dismiss
            newversion_install:Install
            modbotversion:Mod-Bot Version: {0}
            modbotuptodate:Mod-Bot version &apos;{0}&apos; up to date!
            ignoreallcrashes_savedwarning:Saved option message (IgnoreCrashes): All crashes are being ignored, this should only be enabled for testing purposes, turn it off by typing &quot;ignoreallcrashes 0&quot; into the console.
            ignoreallcrashes_on:The game is now ignoring all crashes, this  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_French">
             <summary>
               Looks up a localized string similar to modsbutton:MODS
            newversion_message:Nouvelle version Mod-Bot disponible: {0}\n(Version actuelle: {1})
            newversion_dismiss:Rejeter
            newversion_install:Installer
            modbotversion:Version Mod-Bot: {0}
            modbotuptodate:Version Mod-Bot &apos;{0}&apos; à jour!
            ignoreallcrashes_savedwarning:Message d&apos;option enregistré (IgnoreCrashes): Tous les plantages sont ignorés, cela ne doit être activé qu&apos;à des fins de test, désactivez-le en tapant &quot;ignoreallcrashes 0&quot; dans la console.
            ignoreallcrashes_on:Le jeu ignore désormais tous l [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_German">
             <summary>
               Looks up a localized string similar to modsbutton:Modificationen.
            newversion_message:Eine neue Version von Mod-Bot ist verfügbar.: {0}\n(Aktuelle Version: {1})
            newversion_dismiss:Nicht machen.
            newversion_install:Instalieren.
            modbotversion:Mod-Bot Version: {0}
            modbotuptodate:Mod-Bot Version &apos;{0}&apos; ist auf dem neusten stand!
            ignoreallcrashes_savedwarning:Gespeicherte Nachricht (Ignoriere alle Abstürze): Alle Abstürze werden ignorierd, dies sollte nur für testenden Grund gemacht werden, schalte es aus indem du &quot;ignoreallcrashes 0&quot; in die Conso [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Italian">
             <summary>
               Looks up a localized string similar to modsbutton:MODS
            newversion_message:Nuova versione Mod-Bot disponibile: {0}\n(Versione corrente: {1})
            newversion_dismiss:Respingere
            newversion_install:Installare
            modbotversion:Versione Mod-Bot: {0}
            modbotuptodate:Versione Mod-Bot &apos;{0}&apos; aggiornata!
            ignoreallcrashes_savedwarning:Messaggio di opzione salvato (IgnoreCrashes): tutti gli arresti anomali vengono ignorati, questo dovrebbe essere abilitato solo a scopo di test, disattivarlo digitando &quot;ignoreallcrashes 0&quot; nella console.
            ignoreallcrashes_on:Il g [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Japanese">
             <summary>
               Looks up a localized string similar to modsbutton:MODS
            newversion_message:利用可能な新しいMod-Botバージョン：{0}\n（現在のバージョン：{1}）
            newversion_dismiss:退出させる
            newversion_install:インストール
            modbotversion:Mod-Botバージョン：{0}
            modbotuptodate:Mod-Botバージョン &apos;{0}&apos;が最新です！
            ignoreallcrashes_savedwarning:保存されたオプションメッセージ（IgnoreCrashes）：すべてのクラッシュは無視されます。これはテスト目的でのみ有効にする必要があります。コンソールに「ignoreallcrashes 0」と入力してオフにしてください。
            ignoreallcrashes_on:ゲームは現在すべてのクラッシュを無視しています。このオプションはテスト用にのみ有効にする必要があります。 このオプションを有効にすると、ソフトクラッシュは無視されますが、ハードクラッシュが発生する可能性があります。
            ignoreallcrashes_off:ゲームはクラッシュを無視し [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Korean">
             <summary>
               Looks up a localized string similar to modsbutton:개조
            newversion_message:새로운 Mod-Bot 버전 사용 가능 : {0}\n(현재 버전 : {1})
            newversion_dismiss:버리다
            newversion_install:설치
            modbotversion:Mod-Bot 버전 : {0}
            modbotuptodate:Mod-Bot 버전 &apos;{0}&apos;이 (가) 최신 상태입니다!
            ignoreallcrashes_savedwarning:저장된 옵션 메시지 (IgnoreCrashes) : 모든 충돌이 무시됩니다. 이것은 테스트 목적으로 만 활성화되어야합니다. 콘솔에 &quot;ignoreallcrashes 0&quot;을 입력하여 끄십시오.
            ignoreallcrashes_on:이제 게임이 모든 충돌을 무시하고 있습니다.이 옵션은 테스트 용으로 만 활성화해야합니다. 이 옵션을 활성화하면 소프트 크래시가 무시되지만 하드 크래시는 여전히 발생할 수 있습니다.
            ignoreallcrashes_off:게임이 더 이상 충돌을 무시하지 않습니다.이 옵션은 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Russian">
             <summary>
               Looks up a localized string similar to modsbutton:моды
            newversion_message:Доступна новая версия Mod-Bot: {0}\n(Текущая версия: {1})
            newversion_dismiss:Отклонить
            newversion_install:Установить
            modbotversion:Версия Mod-Bot: {0}
            modbotuptodate:Версия Mod-Bot &apos;{0}&apos; обновлена до последней версии!
            ignoreallcrashes_savedwarning:Сохраненная опция сообщения (IgnoreCrashes): все сбои игнорируются, это следует включить только для целей тестирования, отключите его, введя «ignoreallcrashes 0» в консоли.
            ignoreallcrashes_on:Игра теперь игнорирует все сб [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Simplified_Chinese">
             <summary>
               Looks up a localized string similar to modsbutton:模组
            newversion_message:新的Mod-Bot版本可用: {0}\n(当前版本: {1})
            newversion_dismiss:解除
            newversion_install:安装
            modbotversion:Mod-Bot 版本: {0}
            modbotuptodate:Mod-Bot 版本 &apos;{0}&apos; 是最新的！
            ignoreallcrashes_savedwarning:保存的选项消息 (忽略崩溃): 所有崩溃均被忽略，仅应出于测试目的而启用，请在控制台中键入“ ignoreallcrashes 0”将其关闭。
            ignoreallcrashes_on:游戏现在将忽略所有崩溃，仅应启用此选项进行测试。 启用此选项将忽略软崩溃，但是崩溃仍然可能发生。
            ignoreallcrashes_off:游戏不再忽略崩溃，为游戏稳定起见，应始终关闭此选项。
            crashscreen_customtitle:Mod-Bot开发人员很乐意看到这一点！
            crashscreen_customdescription:将我们的屏幕截图发送给“机器人角斗场Mod-Bot”问题，以便 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Spanish_LatinAmerica">
             <summary>
               Looks up a localized string similar to modsbutton:MODIFICACIONES
            newversion_message:Nueva versión Mod-Bot disponible: {0}\n(Versión actual: {1})
            newversion_dismiss:Descartar
            newversion_install:Instalar en pc
            modbotversion:Versión Mod-Bot: {0}
            modbotuptodate:¡Versión de Mod-Bot &apos;{0}&apos; actualizada!
            ignoreallcrashes_savedwarning:Mensaje de opción guardada (IgnoreCrashes): se ignoran todos los bloqueos, esto solo debe habilitarse con fines de prueba, apáguelo escribiendo &quot;ignoreallcrashes 0&quot; en la consola.
            ignoreallcrashes_on:El juego ahora ig [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBot_Spanish_Spain">
             <summary>
               Looks up a localized string similar to modsbutton:MODIFICACIONES
            newversion_message:Nueva versión Mod-Bot disponible: {0}\n(Versión actual: {1})
            newversion_dismiss:Descartar
            newversion_install:Instalar en pc
            modbotversion:Versión Mod-Bot: {0}
            modbotuptodate:¡Versión de Mod-Bot &apos;{0}&apos; actualizada!
            ignoreallcrashes_savedwarning:Mensaje de opción guardada (IgnoreCrashes): se ignoran todos los bloqueos, esto solo debe habilitarse con fines de prueba, apáguelo escribiendo &quot;ignoreallcrashes 0&quot; en la consola.
            ignoreallcrashes_on:El juego ahora ig [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModLibrary.Properties.Resources.ModBotVersion">
            <summary>
              Looks up a localized string similar to 2.0.3.3.
            </summary>
        </member>
        <member name="M:InternalModBot.ModErrorManager.ShowModBotException(InternalModBot.ModErrorType,ModLibrary.ModInfo,System.Exception)">
            <summary>
            Show <see cref="T:InternalModBot.Generic2ButtonDialogeUI"/> window with described reason, why mod won't load
            </summary>
            <param name="modErrorType"></param>
            <param name="info"></param>
            <param name="caughtException"></param>
        </member>
        <member name="M:InternalModBot.ModsDownloadManager.GetDownloadingModInfo">
            <summary>
            Get mod download information
            </summary>
            <param name="modInfo"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsDownloadManager.DownloadMod(ModLibrary.ModInfo,System.Action)">
            <summary>
            Download a mod using its info
            </summary>
            <param name="modInfo"></param>
            <param name="onComplete"></param>
        </member>
        <member name="M:InternalModBot.ModsDownloadManager.EndDownload(InternalModBot.ModsDownloadManager.ModDownloadCancelReason)">
            <summary>
            Cancel mod download
            </summary>
        </member>
        <member name="M:InternalModBot.ModsDownloadManager.DownloadModsData(System.Action{System.Nullable{InternalModBot.ModsHolder}},System.Action{System.String})">
            <summary>
            Download all mod infos from server
            </summary>
            <param name="onFinishDownload"></param>
            <param name="onGotError"></param>
        </member>
        <member name="T:InternalModBot.ModsHolder">
            <summary>
            Used when deserilizing data from the site
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.Mods">
            <summary>
            A list of all the mods downloaded.
            </summary>
        </member>
        <member name="T:InternalModBot.InjectionTargetAttribute">
            <summary>
            Base attribute type for 0Harmony patch targets
            </summary>
        </member>
        <member name="T:InternalModBot.CalledFromInjections">
            <summary>
            Contains methods that get called from the game itself
            </summary>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromResourcesLoad(System.String)">
            <summary>
            Called from <see cref="M:UnityEngine.Resources.Load(System.String)"/>, <see cref="M:UnityEngine.Resources.Load``1(System.String)"/> and <see cref="P:UnityEngine.ResourceRequest.asset"/>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ConsoleInputManager">
            <summary>
            Used by Mod-Bot to define commands
            </summary>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.OnCommandRan(System.String)">
            <summary>
            The same as <see cref="M:ModLibrary.Mod.OnCommandRan(System.String)"/>, but called in Mod-Bot
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.Crash">
            <summary>
            Crashes the game
            </summary>
        </member>
        <member name="T:InternalModBot.IgnoreCrashesManager">
            <summary>
            Used by Mod-Bot to ignore crashes when the ignoreallcrashes command is active
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.Start">
            <summary>
            Starts ignoring crashes if we are currently configuerd to
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.SetIsIgnoringCrashes(System.Boolean)">
            <summary>
            Sets if we should ignore crashes
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.GetIsIgnoringCrashes">
            <summary>
            Gets if we are currently ignoring crashes
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.DebugLineDrawingManager">
            <summary>
            Used by Mod-Bot to draw lines on screen
            </summary>
        </member>
        <member name="M:InternalModBot.DebugLineDrawingManager.AddLine(InternalModBot.LineInfo)">
            <summary>
            Adds a line to the lines to draw this frame
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:InternalModBot.InternalUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:InternalModBot.InternalUtils.GetSubdomain(System.String)">
            <summary> </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.InternalUtils.GetModFolderRootFromAssemblyPath(System.String)">
            <summary>
            Gets the mod root folder from a specified assembly path
            </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.InternalUtils.GetCallerModPath(System.Int32)">
            <summary>
            Gets the path relative to the Clone drone folder of the mod that called the method this method was called from
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.InternalUtils.GetFullPathFromRelativePath(System.String)">
            <summary>
            Gets the full path from a path relative to the clone drone folder
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.InternalUtils.GetRelativePathFromFullPath(System.String)">
            <summary>
            Gets the relative path from the clone drone folder from a full path
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.LineInfo">
            <summary>
            Describes a line in 3D space
            </summary>
        </member>
        <member name="M:InternalModBot.LineInfo.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:InternalModBot.LineInfo"/> class
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="color"></param>
            <param name="endTime"></param>
        </member>
        <member name="F:InternalModBot.LineInfo.Point1">
            <summary>
            The start point of the line
            </summary>
        </member>
        <member name="F:InternalModBot.LineInfo.Point2">
            <summary>
            The end point of the line
            </summary>
        </member>
        <member name="F:InternalModBot.LineInfo.Color">
            <summary>
            The <see cref="T:UnityEngine.Color"/> of the line
            </summary>
        </member>
        <member name="F:InternalModBot.LineInfo.EndTime">
            <summary>
            The time we want to stop displaying the line
            </summary>
        </member>
        <member name="T:InternalModBot.ModBotHarmonyInjectionManager">
            <summary>
            Handles all of Mod-Bots runtils patching
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotHarmonyInjectionManager.TryInject">
            <summary>
            Injects all patches if it is not already done
            </summary>
        </member>
        <member name="T:InternalModBot.ModBotInputManager">
            <summary>
            Handles what keys are associated with what actions in mod-bot
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputManager.InputOptions">
            <summary>
            All the input options in mod-bot
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotInputManager.GetKeyCode(InternalModBot.ModBotInputType)">
            <summary>
            Gets the key associated with a specifc <see cref="T:InternalModBot.ModBotInputType"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ModBotInputManager.InputOption">
            <summary>
            Class for holding information about a input
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputManager.InputOption.Type">
            <summary>
            <see cref="T:InternalModBot.ModBotInputType"/> we want this input to be
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputManager.InputOption.DefaultKey">
            <summary>
            The defualt key for the input
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputManager.InputOption.DisplayName">
            <summary>
            The display name for the key
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotInputManager.InputOption.#ctor(InternalModBot.ModBotInputType,UnityEngine.KeyCode,System.String)">
            <summary>
            Creates a new <see cref="T:InternalModBot.ModBotInputManager.InputOption"/>
            </summary>
            <param name="type"></param>
            <param name="defaultKey"></param>
            <param name="displayName"></param>
        </member>
        <member name="P:InternalModBot.ModBotInputManager.InputOption.Key">
            <summary>
            Gets or sets the key we want to associate with this input
            </summary>
        </member>
        <member name="T:InternalModBot.ModBotInputType">
            <summary>
            Different actions we want to accociate keys with
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputType.OpenConsole">
            <summary>
            The key for opening the console
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotInputType.ToggleFPSLabel">
            <summary>
            The key for toggling the fps label in the corner
            </summary>
        </member>
        <member name="T:InternalModBot.ModBotLocalizationManager">
            <summary>
            Handles localization of string added in Mod-Bot
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotLocalizationManager.FormatLocalizedStringFromID(System.String,System.Object[])">
            <summary>
            Gets the translated string via <see cref="M:LocalizationManager.GetTranslatedString(System.String,System.Int32)"/> and formats the returned <see langword="string"/> with the given arguments
            </summary>
            <param name="ID">The localization ID to get the translated string of</param>
            <param name="arguments">The arguments to format into the string</param>
            <returns>The translated and formatted string</returns>
        </member>
        <member name="M:InternalModBot.ModBotLocalizationManager.AddAllLocalizationStringsToDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds all Mod-Bot localization IDs and translated text for the current language into the given dictionary
            </summary>
            <param name="languageDictionary"></param>
        </member>
        <member name="M:InternalModBot.ModBotLocalizationManager.LogLocalizedStringOnceLocalizationManagerInitialized(System.String)">
            <summary>
            Passes the output of <see cref="M:LocalizationManager.GetTranslatedString(System.String,System.Int32)"/> into <see cref="M:ModLibrary.debug.Log(System.String)"/> once the <see cref="T:LocalizationManager"/> is initialized
            </summary>
            <param name="localizationID"></param>
        </member>
        <member name="T:InternalModBot.ModBotSettingsManager">
            <summary>
            Handles settings on mod-bot page of the settings
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotSettingsManager.Init(ModdedObject)">
            <summary>
            Sets up the <see cref="T:InternalModBot.ModBotSettingsManager"/>
            </summary>
            <param name="moddedObject"></param>
        </member>
        <member name="M:InternalModBot.ModBotSettingsManager.CreateSettingsWindow(InternalModBot.ModBotSettingsManager.ModBotSettingsBuilder)">
            <summary>
            Populates the settings widow using the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:InternalModBot.Scripting.JavascriptScriptObject">
            <summary>
            Implements a javascript code engine to the <see cref="T:InternalModBot.Scripting.ScriptObject"/> wrapper
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.#ctor">
            <summary>
            Creates a new javascript engine
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptObject.ScriptLanguage">
            <summary>
            What language this engine is in
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.Call(System.String,System.Object[])">
            <summary>
            Calls a global function
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.CallWithReturn(System.String,System.Object[])">
            <summary>
            Calls a global function with a return value
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.GetGlobal(System.String)">
            <summary>
            Gets a global value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.RunCode(System.String)">
            <summary>
            Runs a bit of raw code
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.SetGlobal(System.String,System.Boolean)">
            <summary>
            Sets a global bool value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.SetGlobal(System.String,System.Delegate)">
            <summary>
            Sets a global delegate value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.SetGlobal(System.String,System.Double)">
            <summary>
            Sets a global number value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.SetGlobal(System.String,System.Object)">
            <summary>
            Sets a global object value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptObject.SetGlobal(System.String,System.String)">
            <summary>
            Sets a global string value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:InternalModBot.Scripting.JavascriptScriptValue">
            <summary>
            A wrapper for a javascript value
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptValue.#ctor(Jint.Native.JsValue,InternalModBot.Scripting.JavascriptScriptObject)">
            <summary>
            Sets up the wrapper for a javascript value
            </summary>
            <param name="value"></param>
            <param name="scriptObject"></param>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.Item(System.String)">
            <summary>
            Gets a value out of the value, at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.Item(System.Int32)">
            <summary>
            Gets a value out of the value, at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.AsBool">
            <summary>
            Gets the value as a bool
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.AsString">
            <summary>
            Gets the value as a string
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.AsNumber">
            <summary>
            Gets the value as a number
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.ArrayLength">
            <summary>
            Gets the length of the object
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.JavascriptScriptValue.IsNull">
            <summary>
            Gets if the object is null
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptValue.IsNumber(System.Object)">
            <summary>
            Gets if the provided object is a number
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptValue.CallAsFunction(System.Object[])">
            <summary>
            Calls the value as a function
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.JavascriptScriptValue.CallAsFunctionWithReturn(System.Object[])">
            <summary>
            Calls the value as a function, with a return value
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Scripting.LuaScriptObject">
            <summary>
            A instance of a lua script engine
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.#ctor">
            <summary>
            Sets up the lua script engine
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptObject.ScriptLanguage">
            <summary>
            Tells us this is a lua engine
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.Call(System.String,System.Object[])">
            <summary>
            Calls a function defined in the lua code
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.CallWithReturn(System.String,System.Object[])">
            <summary>
            Calls a function defined in the lua code, and gets the return value it returns
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.GetGlobal(System.String)">
            <summary>
            Gets a global value in the lua engine
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.RunCode(System.String)">
            <summary>
            Runs a bit of lua code
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.SetGlobal(System.String,System.Boolean)">
            <summary>
            Sets a global bool value in the lua engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.SetGlobal(System.String,System.Delegate)">
            <summary>
            Sets a global Delegate value in the lua engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.SetGlobal(System.String,System.Double)">
            <summary>
            Sets a global double value in the lua engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.SetGlobal(System.String,System.Object)">
            <summary>
            Sets a global object value in the lua engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptObject.SetGlobal(System.String,System.String)">
            <summary>
            Sets a global string value in the lua engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:InternalModBot.Scripting.LuaScriptValue">
            <summary>
            A value in lua code, wrapped so we can easily interact with it
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptValue.#ctor(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.Script)">
            <summary>
            Creates the wrapper from a dyn value
            </summary>
            <param name="value"></param>
            <param name="script"></param>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.Item(System.String)">
            <summary>
            Gets the object at the provided index out of the lua table
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.Item(System.Int32)">
            <summary>
            Gets the object at the provided index out of the lua table
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.AsBool">
            <summary>
            Gets the lua value as a bool
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.AsString">
            <summary>
            Gets the lua value as a string
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.AsNumber">
            <summary>
            Gets the lua value as a double
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.ArrayLength">
            <summary>
            Gets the length of the lua table
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.LuaScriptValue.IsNull">
            <summary>
            Gets if the lua value is null 
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptValue.CallAsFunction(System.Object[])">
            <summary>
            Calls the value as a function
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.LuaScriptValue.CallAsFunctionWithReturn(System.Object[])">
            <summary>
            Calls the value as a function, and gets the return value from it
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Scripting.ScriptObject">
            <summary>
            Abstract class used to wrap javascript and lua engines in
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.Initialize">
            <summary>
            Initializes the engine, stuff like setting up global functions
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.ImportEnum``1">
            <summary>
            Imports a enum to the code engine
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:InternalModBot.Scripting.ScriptObject.OnError">
            <summary>
            Invokes when a error occurs in the engine
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.SetGlobal(System.String,System.Boolean)">
            <summary>
            Sets a global bool value in the engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.SetGlobal(System.String,System.Delegate)">
            <summary>
            Sets a global Delegate value in the engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.SetGlobal(System.String,System.Double)">
            <summary>
            Sets a global double value in the engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.SetGlobal(System.String,System.Object)">
            <summary>
            Sets a global object value in the engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.SetGlobal(System.String,System.String)">
            <summary>
            Sets a global string value in the engine
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.GetGlobal(System.String)">
            <summary>
            Sets a global value in the engine
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.RunCode(System.String)">
            <summary>
            Run a bit of raw code
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.Call(System.String,System.Object[])">
            <summary>
            Calls a global function
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptObject.CallWithReturn(System.String,System.Object[])">
            <summary>
            Calls a global function, with a return value
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptObject.ScriptLanguage">
            <summary>
            The language of the code engine
            </summary>
        </member>
        <member name="T:InternalModBot.Scripting.ScriptValue">
            <summary>
            Abstract class to wrap a value in a code engine
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.IsNull">
            <summary>
            if the value is null
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.AsBool">
            <summary>
            The value as a bool
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.AsString">
            <summary>
            The value as a string
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.AsNumber">
            <summary>
            The value as a double
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.Item(System.String)">
            <summary>
            Get a field on the object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.ArrayLength">
            <summary>
            Gets the lengh of the object
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.ScriptValue.Item(System.Int32)">
            <summary>
            Gets a index from the object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptValue.CallAsFunction(System.Object[])">
            <summary>
            Calls the value as a function
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:InternalModBot.Scripting.ScriptValue.CallAsFunctionWithReturn(System.Object[])">
            <summary>
            Calls the value as a function, with a return value
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Scripting.ScriptLanguage">
            <summary>
            The supported scripting languages
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.ScriptLanguage.Javascript">
            <summary>
            Javascript
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.ScriptLanguage.Lua">
            <summary>
            Lua
            </summary>
        </member>
        <member name="T:InternalModBot.Scripting.ScriptErrorType">
            <summary>
            The different types of possible errors in scripting language code
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.ScriptErrorType.SyntaxError">
            <summary>
            When the provided syntax was invalid
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.ScriptErrorType.RuntimeError">
            <summary>
            When something goes wrong duing the runtime
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.ScriptErrorType.OtherError">
            <summary>
            All other possible script errors
            </summary>
        </member>
        <member name="T:InternalModBot.Scripting.DebugRef">
            <summary>
            Contains debug methods for scriptable objects
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.DebugRef.log(System.String)">
            <summary>
            Writes to the console
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:InternalModBot.Scripting.GlobalScriptFunctions">
            <summary>
            Contains all the defualt objects that can be called from custom script objects
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.GlobalScriptFunctions.vector3(System.Double,System.Double,System.Double)">
            <summary>
            Creates a Vector3Ref
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.GlobalScriptFunctions.getPlayer">
            <summary>
            Gets the player gameobject
            </summary>
            <returns></returns>
        </member>
        <member name="F:InternalModBot.Scripting.GlobalScriptFunctions.Debug">
            <summary>
            Used for Debuging things from scriptable objects
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.GlobalScriptFunctions.Input">
            <summary>
            Used for detecting input
            </summary>
        </member>
        <member name="F:InternalModBot.Scripting.GlobalScriptFunctions.LevelObjects">
            <summary>
            Used for spawing / managing level objects
            </summary>
        </member>
        <member name="T:InternalModBot.Scripting.InputRef">
            <summary>
            defines functions used in scriptable objects to detect key inputs
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.InputRef.getKeyDown(System.Int32)">
            <summary>
            Gets if a key was pressed this frame
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.InputRef.getKey(System.Int32)">
            <summary>
            Gets if a key is pressed
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.InputRef.getKeyUp(System.Int32)">
            <summary>
            Gets if a key was released this frame
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Scripting.LevelObjectsRef">
            <summary>
            Contains functions for handling level objects
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.LevelObjectsRef.getLevelEditorObjects">
            <summary>
            Gets all the Gameobjects in the curret level
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.LevelObjectsRef.createObject(System.String)">
            <summary>
            Creates a new level editor object
            </summary>
            <param name="prefabPath"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Scripting.GameObjectRef">
            <summary>
            A wrapper for the <see cref="T:UnityEngine.GameObject"/> for scriptable objects
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.GameObjectRef.create(UnityEngine.GameObject)">
            <summary>
            Initializes a new wrapper for a target gameobject
            </summary>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="P:InternalModBot.Scripting.GameObjectRef.position">
            <summary>
            The position of the gameobject
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.GameObjectRef.eulerAngles">
            <summary>
            The rotation, in eulereangles, of the object
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.GameObjectRef.scale">
            <summary>
            The scale of the object
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.GameObjectRef.parent">
            <summary>
            The parent of the object
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.GameObjectRef.getForward">
            <summary>
            The forward vector of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.GameObjectRef.destroy">
            <summary>
            Destroys the object
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.GameObjectRef.op_Implicit(InternalModBot.Scripting.GameObjectRef)~UnityEngine.GameObject">
            <summary>
            Makes this wrapper be able to be implicitily converted to a gameobject
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:InternalModBot.Scripting.GameObjectRef.op_Implicit(UnityEngine.GameObject)~InternalModBot.Scripting.GameObjectRef">
            <summary>
            Makes gameobjects be implicitly converted to this wrapper
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="T:InternalModBot.Scripting.Vector3Ref">
            <summary>
            A wrapper for the <see cref="T:UnityEngine.Vector3"/> class
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.Vector3Ref.x">
            <summary>
            The X part of the Vector
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.Vector3Ref.y">
            <summary>
            The Y part of the vector
            </summary>
        </member>
        <member name="P:InternalModBot.Scripting.Vector3Ref.z">
            <summary>
            The Z part of the vector
            </summary>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.add(InternalModBot.Scripting.Vector3Ref)">
            <summary>
            Adds another vector3 to this one
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.subtract(InternalModBot.Scripting.Vector3Ref)">
            <summary>
            Subtracts another vector3 from this one
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.multiply(System.Double)">
            <summary>
            Mutliplies this vector by a number
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.divide(System.Double)">
            <summary>
            Divides this vector by a number
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.op_Implicit(InternalModBot.Scripting.Vector3Ref)~UnityEngine.Vector3">
            <summary>
            Allows us to implicitly convert this wrapper to a <see cref="T:UnityEngine.Vector3"/>
            </summary>
            <param name="vector3"></param>
        </member>
        <member name="M:InternalModBot.Scripting.Vector3Ref.op_Implicit(UnityEngine.Vector3)~InternalModBot.Scripting.Vector3Ref">
            <summary>
            Allows us to implicitly convert a <see cref="T:UnityEngine.Vector3"/> to our wrapper
            </summary>
            <param name="vector3"></param>
        </member>
        <member name="T:InternalModBot.ThreadedDelegateScheduler">
            <summary>
            Allows us to schedule an action to run on the next update from another thread
            </summary>
        </member>
        <member name="M:InternalModBot.ThreadedDelegateScheduler.CallActionNextUpdate(System.Action)">
            <summary>
            Calls the passed action on the next update on the main thread
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:InternalModBot.Generic2ButtonDialogeUI">
            <summary>
            The generic 2 button dialoge window Ui
            </summary>
        </member>
        <member name="F:InternalModBot.Generic2ButtonDialogeUI.Text">
            <summary>
            The text element in the UI
            </summary>
        </member>
        <member name="F:InternalModBot.Generic2ButtonDialogeUI.Button1">
            <summary>
            The first button in the UI
            </summary>
        </member>
        <member name="F:InternalModBot.Generic2ButtonDialogeUI.Button2">
            <summary>
            The second button in the UI
            </summary>
        </member>
        <member name="F:InternalModBot.Generic2ButtonDialogeUI.UIRoot">
            <summary>
            The actual root of the window
            </summary>
        </member>
        <member name="M:InternalModBot.Generic2ButtonDialogeUI.Init(ModdedObject)">
            <summary>
            Sets up the generic 2 button dialoge from a modded object
            </summary>
            <param name="moddedObject"></param>
        </member>
        <member name="T:InternalModBot.ModBotSignInUI">
            <summary>
            Handles the UI for signing into mod-bot
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotSignInUI.WindowObject">
            <summary>
            The base window object
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotSignInUI.Init(ModdedObject)">
            <summary>
            Sets up the sign in UI
            </summary>
            <param name="moddedObject"></param>
        </member>
        <member name="M:InternalModBot.ModBotSignInUI.SetSession(System.String)">
            <summary>
            Sets the current session in the API
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:InternalModBot.ModBotSignInUI.OpenSignInForm">
            <summary>
            Opens the sign in form
            </summary>
        </member>
        <member name="T:InternalModBot.FPSCounterUI">
            <summary>
            Handles the fps counter in the corner
            </summary>
        </member>
        <member name="M:InternalModBot.FPSCounterUI.Init(UnityEngine.UI.Text)">
            <summary>
            Sets up the FPS conter
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:InternalModBot.ModBotUIRoot">
            <summary>
            The UI root for all mod-bot UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.ConsoleUI">
            <summary>
            The Console UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.FPSCounter">
            <summary>
            The FPS counter in the corner
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.ModBotSignInUI">
            <summary>
            The modbot sign in UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.ModsWindow">
            <summary>
            The mods window UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.Generic2ButtonDialogeUI">
            <summary>
            The generic 2 Button dialoge UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.ModOptionsWindow">
            <summary>
            The mod options window UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModBotUIRoot.Root">
            <summary>
            The root canvas
            </summary>
        </member>
        <member name="M:InternalModBot.ModBotUIRoot.Init(ModdedObject)">
            <summary>
            Sets up the mod-bot UI from a modded object
            </summary>
            <param name="moddedObject"></param>
        </member>
        <member name="T:InternalModBot.RegisterShouldCursorBeEnabledDelegate">
            <summary>
            Used internally in mod-bot for telling if the cursor should be enabled or not
            </summary>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.Register(System.Func{System.Boolean})">
            <summary>
            Registers a new handler, if this handler returns <see langword="true"/> the cursor will be unlocked
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.UnRegister(System.Func{System.Boolean})">
            <summary>
            Removes a handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.ShouldMouseBeEnabled">
            <summary>
            Returns <see langword="true"/> if any of the registerd handlers return <see langword="true"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.StartupManager">
            <summary>
            Used to start Mod-Bot when the game starts
            </summary>
        </member>
        <member name="M:InternalModBot.StartupManager.OnStartUp">
            <summary>
            Sets up Mod-Mot in general, called on game start
            </summary>
        </member>
        <member name="T:InternalModBot.ModOptionsWindow">
            <summary>
            The mod options window UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModOptionsWindow.Content">
            <summary>
            The actual content holder of the window
            </summary>
        </member>
        <member name="F:InternalModBot.ModOptionsWindow.XButton">
            <summary>
            The close button of the window
            </summary>
        </member>
        <member name="F:InternalModBot.ModOptionsWindow.PageButtonsHolder">
            <summary>
            The page buttons holder
            </summary>
        </member>
        <member name="F:InternalModBot.ModOptionsWindow.WindowObject">
            <summary>
            The actual window object
            </summary>
        </member>
        <member name="T:InternalModBot.ModsWindow">
            <summary>
            The mods window UI
            </summary>
        </member>
        <member name="F:InternalModBot.ModsWindow.Content">
            <summary>
            The holder for the content of the window
            </summary>
        </member>
        <member name="F:InternalModBot.ModsWindow.CloseButton">
            <summary>
            The close button
            </summary>
        </member>
        <member name="F:InternalModBot.ModsWindow.GetMoreModsButton">
            <summary>
            The get more mods button
            </summary>
        </member>
        <member name="F:InternalModBot.ModsWindow.OpenModsFolderButton">
            <summary>
            The open mods folder button
            </summary>
        </member>
        <member name="F:InternalModBot.ModsWindow.WindowObject">
            <summary>
            The base window object
            </summary>
        </member>
        <member name="M:InternalModBot.ModsWindow.Init(ModdedObject)">
            <summary>
            Sets up the Mods window UI from a modded object
            </summary>
            <param name="moddedObject"></param>
        </member>
        <member name="T:InternalModBot.VersionLabelManager">
            <summary>
            Takes care of editing the version label
            </summary>
        </member>
        <member name="F:InternalModBot.VersionLabelManager.VersionLabel">
            <summary>
            The version label itself
            </summary>
        </member>
        <member name="M:InternalModBot.VersionLabelManager.SetLine(System.Int32,System.String)">
            <summary>
            Sets the provided line of the version label to the provided text, creating new lines if neccicary
            </summary>
            <param name="line"></param>
            <param name="value"></param>
        </member>
        <member name="T:InternalModBot.ConsoleUI">
            <summary>
            Used by Mod-Bot as the low level level of the debug console system
            </summary>
        </member>
        <member name="F:InternalModBot.ConsoleUI.Animator">
            <summary>
            The animator of the console
            </summary>
        </member>
        <member name="F:InternalModBot.ConsoleUI.MAX_LINES_COUNT">
            <summary>
            The amount of lines we should allow in the console before we start removing lines
            </summary>
        </member>
        <member name="M:InternalModBot.ConsoleUI.Init(UnityEngine.Animator,UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.UI.InputField)">
            <summary>
            Initialized the <see cref="T:InternalModBot.ConsoleUI"/>
            </summary>
            <param name="animator"></param>
            <param name="content"></param>
            <param name="innerHolder"></param>
            <param name="input"></param>
        </member>
        <member name="M:InternalModBot.ConsoleUI.Log(System.String)">
            <summary>
            Writes the specified text to the console
            </summary>
            <param name="whatToLog"></param>
        </member>
        <member name="M:InternalModBot.ConsoleUI.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes the specified text to the console, now in color!
            </summary>
            <param name="whatToLog"></param>
            <param name="color"></param>
        </member>
        <member name="M:InternalModBot.ConsoleUI.RunCommand(System.String)">
            <summary>
            Gets called when the user types in a command into the input field and presses enter
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:InternalModBot.ScrollRectExtensions">
            <summary>
            Adds a few extension methods to the <see cref="T:UnityEngine.UI.ScrollRect"/> class
            </summary>
        </member>
        <member name="M:InternalModBot.ScrollRectExtensions.ScrollToTop(UnityEngine.UI.ScrollRect)">
            <summary>
            Scrolls the <see cref="T:UnityEngine.UI.ScrollRect"/> to the top
            </summary>
            <param name="scrollRect"></param>
        </member>
        <member name="M:InternalModBot.ScrollRectExtensions.ScrollToBottom(UnityEngine.UI.ScrollRect)">
            <summary>
            Scrolls the <see cref="T:UnityEngine.UI.ScrollRect"/> to the bottom
            </summary>
            <param name="scrollRect"></param>
        </member>
        <member name="T:InternalModBot.CloseModOptionsWindowOnEscapeKey">
            <summary>
            Attaced to mod options windows to close the window when the user clicks escape
            </summary>
        </member>
        <member name="M:InternalModBot.CloseModOptionsWindowOnEscapeKey.Init(ModLibrary.ModOptionsWindowBuilder)">
            <summary>
            Sets the owner to the value passed
            </summary>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.LoadedModInfo">
            <summary>
            Stores all necessary data about a loaded mod
            </summary>
        </member>
        <member name="M:InternalModBot.LoadedModInfo.#ctor(ModLibrary.Mod,ModLibrary.ModInfo)">
            <summary>
            Sets the mod field to the passed mod, and will not deactivate the mod
            </summary>
            <param name="mod"></param>
            <param name="modInfo"></param>
        </member>
        <member name="T:InternalModBot.ModsManager">
            <summary>
            Handles mod loading, disableing and enableing.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsManager.MOD_INFO_FILE_NAME">
            <summary>
            The name of the json file containing the mod data
            </summary>
        </member>
        <member name="F:InternalModBot.ModsManager.MOD_FOLDER_NAME">
            <summary>
            The name of the mods folder
            </summary>
        </member>
        <member name="P:InternalModBot.ModsManager.ModFolderPath">
            <summary>
            Gets the mod folder path
            </summary>
        </member>
        <member name="F:InternalModBot.ModsManager.PassOnMod">
            <summary>
            The "pass on mod" that calls everything called on it on all loaded mods
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.Initialize">
            <summary>
            Initializes the mods manager
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.ReloadMods">
            <summary>
            Reloads all loaded mods
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.ClearCache">
            <summary>
            Clears all mod cache (including the AssetLoader cache)
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.GetInfo(ModLibrary.Mod)">
            <summary>
            Returns the <see cref="T:ModLibrary.ModInfo"/> assosiated with a specific mod, returns null if the mod is not loaded
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.RefreshAllLoadedActiveMods">
            <summary>
            Refreshes the cache for what mods are active and loaded
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.GetAllLoadedActiveMods">
            <summary>
            Gets all the currently loaded mods that are not disabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.GetActiveModInfos">
            <summary>
            Returns all the mods that are active Infos
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ModdedOptionButtonItem">
            <summary>
            Used by Mod-Bot to reprecent a button in a modded options page
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionButtonItem.OnClick">
            <summary>
            If is not null, is called when the user clicks the button
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionButtonItem.OnCreate">
            <summary>
            Is called when the button is spawned
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionButtonItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionCheckboxItem">
            <summary>
            Used by Mod-Bot to reprecent checkbox items
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionCheckboxItem.DefaultValue">
            <summary>
            The value of the checkbox by default
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionCheckboxItem.OnCreate">
            <summary>
            Called when the toggle is spawned
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionCheckboxItem.OnChange">
            <summary>
            called when the value of the toggle is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionCheckboxItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionDropDownItem">
            <summary>
            Used by Mod-Bot to reprecent a dropdown item in a modded options page
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionDropDownItem.Options">
            <summary>
            The dropdowns options
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionDropDownItem.DefaultValue">
            <summary>
            The default value of the dropdown
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionDropDownItem.OnCreate">
            <summary>
            Called when the dropdown is created
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionDropDownItem.OnChange">
            <summary>
            Called when the value of the dropdown is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionDropDownItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionVerifyingInputFieldItem">
            <summary>
            Used by Mod-Bot to represent an InputField that verifies input in a modded options page
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionVerifyingInputFieldItem.Verify">
            <summary>
            Used to verify the input of the input field, if this returns <see langword="false"/>, the value will revert back to the previous value, and apply it normally otherwise.
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionVerifyingInputFieldItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionInputFieldItem">
            <summary>
            Used by Mod-Bot to reprecent a InputField in a modded options page
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionInputFieldItem.DefaultValue">
            <summary>
            The default value of the input field
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionInputFieldItem.OnCreate">
            <summary>
            Called when the InputField is spawned
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionInputFieldItem.OnChange">
            <summary>
            Called when the content of the input field is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionInputFieldItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionIntSliderItem">
            <summary>
            Used to reprecent Int slider items on a modded options page
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionIntSliderItem.Max">
            <summary>
            The max value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionIntSliderItem.Min">
            <summary>
            The min value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionIntSliderItem.DefaultValue">
            <summary>
            The default value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionIntSliderItem.OnCreate">
            <summary>
            Called when the slider is created
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionIntSliderItem.OnChange">
            <summary>
            Called when the value of the slider is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionIntSliderItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionKeyCodeItem">
            <summary>
            Used by Mod-Bot to reprecent a KeyCode item in a modded options window
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionKeyCodeItem.DefaultValue">
            <summary>
            The default keycode
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionKeyCodeItem.OnCreate">
            <summary>
            called when the KeyCodeInput item is created
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionKeyCodeItem.OnChange">
            <summary>
            Called when the keycode is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionKeyCodeItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionLabelItem">
            <summary>
            Used by Mod-Bot to reprecent label items on modded option pages
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionLabelItem.OnCreate">
            <summary>
            Called when the label is created
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionLabelItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModdedOptionSliderItem">
            <summary>
            Used by Mod-Bot to reprecent Slider items on modded option pages
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionSliderItem.Max">
            <summary>
            The max value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionSliderItem.Min">
            <summary>
            The min value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionSliderItem.DefaultValue">
            <summary>
            The default value of the slider
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionSliderItem.OnCreate">
            <summary>
            Called when the slider is created
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedOptionSliderItem.OnChange">
            <summary>
            Called when the value of the slider is changed
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedOptionSliderItem.CreatePageItem(UnityEngine.GameObject,ModLibrary.Mod)">
            <summary>
            Places the page item in the page
            </summary>
            <param name="holder"></param>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.ModsPanelManager">
            <summary>
            Used by Mod-Bot to control most of the UI in Mod-Bot, this has control over the mod buttons and mods window. Note that all functions and fields on this class are private since they more or less work on their own.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsPanelManager.DisabledModColor">
            <summary>
            The color used for disabled mods
            </summary>
        </member>
        <member name="M:InternalModBot.ModsPanelManager.OpenModsWindows(System.Action)">
            <summary>
            Opens mods panel. I actually made it for CDO mod
            </summary>
            <param name="onWindowClose"></param>
        </member>
        <member name="M:InternalModBot.ModsPanelManager.ReloadModItems">
            <summary>
            Refreshes what mods should be displayed in the mods menu
            </summary>
        </member>
        <member name="T:InternalModBot.StringAndByteArrayConverterExtensions">
            <summary>
            Adds the ToBytes method to <see langword="string"/> and the RawBytesToString method to <see langword="byte"/>[]
            </summary>
        </member>
        <member name="M:InternalModBot.StringAndByteArrayConverterExtensions.ToBytes(System.String)">
            <summary>
            Converts each <see langword="char"/> in this <see langword="string"/> to a <see langword="byte"/>, and puts them in a <see langword="bye"/>[] in order
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.StringAndByteArrayConverterExtensions.RawBytesToString(System.Byte[])">
            <summary>
            Converts each <see langword="byte"/> in the <see langword="byte"/>[] to a <see langword="char"/>, then combines them to a <see langword="string"/> in order
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.OptionsSaver">
            <summary>
            Used by Mod-Bot to save mod options
            </summary>
        </member>
        <member name="T:InternalModBot.PassOnToModsManager">
            <summary>
            Used by Mod-Bot to call events on all loaded active mods, you probably dont want to use this from mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModRefreshed">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnLevelEditorStarted">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCommandRan(System.String)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterSpawned(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverSpawned if the passed character is a FirstPersonMover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterUpdate(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverUpdate if the passed character is a firstpersonmover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterKilled(Character,Character,DamageSourceType,System.Int32)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="killedCharacter"></param>
            <param name="killerCharacter"></param>
            <param name="damageSourceType"></param>
            <param name="attackID"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModDeactivated">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.ShouldCursorBeEnabled">
            <summary>
            Gets the response from this from all loaded mods, and uses the or operator on all of them, then returns
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GlobalUpdate">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnResourcesLoad(System.String)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnLanguageChanged(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="newLanguageID"></param>
            <param name="localizationDictionary"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnClientConnectedToServer">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnClientDisconnectedFromServer">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="T:InternalModBot.UpdateChecker">
            <summary>
            Used by Mod-Bot to check if there is a newer version available
            </summary>
        </member>
    </members>
</doc>
